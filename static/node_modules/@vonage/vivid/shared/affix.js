import { I as Icon } from './icon.js';
import { a as attr, h as html } from './index.js';
import { s as slotted } from './slotted.js';

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
class AffixIcon {
}
__decorateClass([
  attr
], AffixIcon.prototype, "icon", 2);
__decorateClass([
  attr({ mode: "fromView" })
], AffixIcon.prototype, "iconSlottedContent", 2);
class AffixIconWithTrailing extends AffixIcon {
  constructor() {
    super(...arguments);
    this.iconTrailing = false;
  }
}
__decorateClass([
  attr({
    mode: "boolean",
    attribute: "icon-trailing"
  })
], AffixIconWithTrailing.prototype, "iconTrailing", 2);
const IconWrapper = {
  Slot: false,
  Span: true
};
const affixIconTemplateFactory = (context) => {
  const iconTag = context.tagFor(Icon);
  return (icon, slottedState = IconWrapper.Span) => {
    if (!icon && !slottedState) {
      return html`<slot name="icon" ${slotted("iconSlottedContent")}></slot>`;
    }
    if (!icon && slottedState) {
      return null;
    }
    const iconTemplate = html`<${iconTag} :name="${() => icon}"></${iconTag}>`;
    return slottedState ? html`<span class="icon">${iconTemplate}</span>` : html`<slot name="icon">${iconTemplate}</slot>`;
  };
};

export { AffixIcon as A, IconWrapper as I, affixIconTemplateFactory as a, AffixIconWithTrailing as b };
