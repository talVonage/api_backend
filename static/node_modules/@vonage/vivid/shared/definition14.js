import { F as FoundationElement, _ as __decorate, a as attr, o as observable, h as html, r as registerFactory } from './index.js';
import { a as iconRegistries } from './definition25.js';
import { f as focusRegistries } from './definition56.js';
import './affix.js';
import { e as errorText, f as formElements, F as FormElementSuccessText, a as FormElementHelperText, g as getFeedbackTemplate } from './index2.js';
import { C as CheckableFormAssociated } from './form-associated.js';
import { a as keySpace$1 } from './key-codes.js';
import { a as applyMixins } from './apply-mixins.js';
import { f as focusTemplateFactory } from './focus2.js';
import { I as Icon } from './icon.js';
import { w as when } from './when.js';
import { s as slotted } from './slotted.js';
import { c as classNames } from './class-names.js';

class _Checkbox extends FoundationElement {
}
/**
 * A form-associated base class for the {@link @microsoft/fast-foundation#(Checkbox:class)} component.
 *
 * @internal
 */
class FormAssociatedCheckbox extends CheckableFormAssociated(_Checkbox) {
    constructor() {
        super(...arguments);
        this.proxy = document.createElement("input");
    }
}

/**
 * A Checkbox Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#checkbox | ARIA checkbox }.
 *
 * @slot checked-indicator - The checked indicator
 * @slot indeterminate-indicator - The indeterminate indicator
 * @slot - The default slot for the label
 * @csspart control - The element representing the visual checkbox control
 * @csspart label - The label
 * @fires change - Emits a custom change event when the checked state changes
 *
 * @public
 */
let Checkbox$1 = class Checkbox extends FormAssociatedCheckbox {
    constructor() {
        super();
        /**
         * The element's value to be included in form submission when checked.
         * Default to "on" to reach parity with input[type="checkbox"]
         *
         * @internal
         */
        this.initialValue = "on";
        /**
         * The indeterminate state of the control
         */
        this.indeterminate = false;
        /**
         * @internal
         */
        this.keypressHandler = (e) => {
            if (this.readOnly) {
                return;
            }
            switch (e.key) {
                case keySpace$1:
                    if (this.indeterminate) {
                        this.indeterminate = false;
                    }
                    this.checked = !this.checked;
                    break;
            }
        };
        /**
         * @internal
         */
        this.clickHandler = (e) => {
            if (!this.disabled && !this.readOnly) {
                if (this.indeterminate) {
                    this.indeterminate = false;
                }
                this.checked = !this.checked;
            }
        };
        this.proxy.setAttribute("type", "checkbox");
    }
    readOnlyChanged() {
        if (this.proxy instanceof HTMLInputElement) {
            this.proxy.readOnly = this.readOnly;
        }
    }
};
__decorate([
    attr({ attribute: "readonly", mode: "boolean" })
], Checkbox$1.prototype, "readOnly", void 0);
__decorate([
    observable
], Checkbox$1.prototype, "defaultSlottedNodes", void 0);
__decorate([
    observable
], Checkbox$1.prototype, "indeterminate", void 0);

const styles = "/**\n * Do not edit directly\n * Generated on Tue, 17 Oct 2023 15:27:52 GMT\n */\n:host([disabled]) {\n  cursor: not-allowed;\n}\n\n.base {\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  vertical-align: middle;\n}\n.base.connotation-cta {\n  /* @cssprop [--vvd-checkbox-cta-primary=var(--vvd-color-cta-500)] */\n  --_connotation-color-primary: var(--vvd-checkbox-cta-primary, var(--vvd-color-cta-500));\n  /* @cssprop [--vvd-checkbox-cta-primary-text=var(--vvd-color-canvas)] */\n  --_connotation-color-primary-text: var(--vvd-checkbox-cta-primary-text, var(--vvd-color-canvas));\n  /* @cssprop [--vvd-checkbox-cta-primary-increment=var(--vvd-color-cta-600)] */\n  --_connotation-color-primary-increment: var(--vvd-checkbox-cta-primary-increment, var(--vvd-color-cta-600));\n  /* @cssprop [--vvd-checkbox-cta-intermediate=var(--vvd-color-cta-500)] */\n  --_connotation-color-intermediate: var(--vvd-checkbox-cta-intermediate, var(--vvd-color-cta-500));\n  /* @cssprop [--vvd-checkbox-cta-backdrop=var(--vvd-color-cta-50)] */\n  --_connotation-color-backdrop: var(--vvd-checkbox-cta-backdrop, var(--vvd-color-cta-50));\n  /* @cssprop [--vvd-checkbox-cta-firm=var(--vvd-color-cta-600)] */\n  --_connotation-color-firm: var(--vvd-checkbox-cta-firm, var(--vvd-color-cta-600));\n}\n.base:not(.connotation-cta) {\n  /* @cssprop [--vvd-checkbox-accent-primary=var(--vvd-color-canvas-text)] */\n  --_connotation-color-primary: var(--vvd-checkbox-accent-primary, var(--vvd-color-canvas-text));\n  /* @cssprop [--vvd-checkbox-accent-primary-text=var(--vvd-color-canvas)] */\n  --_connotation-color-primary-text: var(--vvd-checkbox-accent-primary-text, var(--vvd-color-canvas));\n  /* @cssprop [--vvd-checkbox-accent-primary-increment=var(--vvd-color-neutral-800)] */\n  --_connotation-color-primary-increment: var(--vvd-checkbox-accent-primary-increment, var(--vvd-color-neutral-800));\n  /* @cssprop [--vvd-checkbox-accent-intermediate=var(--vvd-color-neutral-500)] */\n  --_connotation-color-intermediate: var(--vvd-checkbox-accent-intermediate, var(--vvd-color-neutral-500));\n  /* @cssprop [--vvd-checkbox-accent-backdrop=var(--vvd-color-canvas)] */\n  --_connotation-color-backdrop: var(--vvd-checkbox-accent-backdrop, var(--vvd-color-canvas));\n  /* @cssprop [--vvd-checkbox-accent-firm=var(--vvd-color-canvas-text)] */\n  --_connotation-color-firm: var(--vvd-checkbox-accent-firm, var(--vvd-color-canvas-text));\n}\n.base {\n  --_appearance-color-text: var(--vvd-color-canvas-text);\n  --_appearance-color-fill: var(--_connotation-color-backdrop);\n  --_appearance-color-outline: var(--_connotation-color-intermediate);\n}\n.base:where(:hover, .hover):where(:not(:disabled, .disabled, .readonly)) {\n  --_appearance-color-text: var(--vvd-color-canvas-text);\n  --_appearance-color-fill: var(--_connotation-color-backdrop);\n  --_appearance-color-outline: var(--_connotation-color-firm);\n}\n.base:where(:checked, .checked):where(:not(:disabled, .disabled)) {\n  --_appearance-color-text: var(--_connotation-color-primary-text);\n  --_appearance-color-fill: var(--_connotation-color-primary);\n  --_appearance-color-outline: var(--_connotation-color-primary);\n}\n.base:where(:checked, .checked):where(:hover, .hover) {\n  --_appearance-color-text: var(--_connotation-color-primary-text);\n  --_appearance-color-fill: var(--_connotation-color-primary-increment);\n  --_appearance-color-outline: var(--_connotation-color-primary);\n}\n.base:where(:disabled, .disabled) {\n  --_appearance-color-text: var(--vvd-color-neutral-300);\n  --_appearance-color-fill: var(--vvd-color-neutral-100);\n  --_appearance-color-outline: var(--vvd-color-neutral-300);\n}\n.base:where(.readonly):where(:not(:disabled, .disabled)) {\n  --_appearance-color-text: var(--vvd-color-canvas-text);\n  --_appearance-color-fill: var(--vvd-color-neutral-200);\n  --_appearance-color-outline: var(--vvd-color-neutral-400);\n}\n@supports selector(:focus-visible) {\n  .base:focus-visible {\n    outline: none;\n  }\n}\n@supports (user-select: none) {\n  .base {\n    user-select: none;\n  }\n}\n.base:not(.disabled) {\n  cursor: pointer;\n}\n.base.disabled {\n  pointer-events: none;\n}\n\n.control {\n  position: relative;\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--_appearance-color-fill);\n  block-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 20));\n  border-radius: 5px;\n  box-shadow: inset 0 0 0 2px var(--_appearance-color-outline);\n  color: var(--_appearance-color-text);\n  inline-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 20));\n}\n\n.indicator {\n  font-size: calc(calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 20)) - 4px);\n}\n.base:not(.checked) .indicator.checkmark {\n  display: none;\n}\n\n.base.checked .indicator.minus, .base:not(.indeterminate) .indicator.minus {\n  display: none;\n}\n\nlabel {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  color: var(--vvd-color-canvas-text);\n  column-gap: 4px;\n  cursor: pointer;\n  font: var(--vvd-typography-base);\n}\n.hide-label label {\n  display: none;\n}\n\n.focus-indicator {\n  --focus-inset: -3px;\n  --focus-stroke-gap-color: transparent;\n  border-radius: 6px;\n}\n.base:not(:focus-visible) .focus-indicator {\n  display: none;\n}\n\n.icon {\n  font-size: calc(calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 20)) * 0.6);\n  line-height: 1;\n}\n\n.message {\n  margin-block-start: 4px;\n  --_low-ink-color: var(--vvd-color-neutral-600);\n}";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
const keySpace = " ";
let Checkbox = class extends Checkbox$1 {
  constructor() {
    super(...arguments);
    /**
     * !remove method as will be implemented by fast-foundation in version after 2.46.9
     *
     * @internal
     */
    this.keypressHandler = (event) => {
      if (event.target instanceof HTMLAnchorElement) {
        return true;
      }
      switch (event.key) {
        case keySpace:
          if (this.indeterminate) {
            this.indeterminate = false;
          }
          this.checked = !this.checked;
          break;
      }
      return false;
    };
    /**
     * !remove method as will be implemented by fast-foundation in version after 2.46.9
     *
     * @internal
     */
    this.clickHandler = (event) => {
      if (event.target instanceof HTMLAnchorElement) {
        return true;
      }
      if (!this.disabled && !this.readOnly) {
        if (this.indeterminate) {
          this.indeterminate = false;
        }
        this.checked = !this.checked;
      }
      return false;
    };
  }
};
__decorateClass([
  attr
], Checkbox.prototype, "connotation", 2);
__decorateClass([
  observable
], Checkbox.prototype, "slottedContent", 2);
Checkbox = __decorateClass([
  errorText,
  formElements
], Checkbox);
applyMixins(Checkbox, FormElementHelperText, FormElementSuccessText);

const getClasses = ({
  connotation,
  readOnly,
  checked,
  disabled,
  indeterminate,
  errorValidationMessage,
  successText,
  label,
  slottedContent
}) => classNames(
  "base",
  [`connotation-${connotation}`, Boolean(connotation)],
  ["readonly", Boolean(readOnly)],
  ["checked", Boolean(checked) || Boolean(indeterminate)],
  ["disabled", Boolean(disabled)],
  ["error connotation-alert", Boolean(errorValidationMessage)],
  ["success connotation-success", !!successText],
  ["hide-label", !label && !slottedContent?.length]
);
const CheckboxTemplate = (context) => {
  const focusTemplate = focusTemplateFactory(context);
  const iconTag = context.tagFor(Icon);
  return html`<div class="${getClasses}"
			role="checkbox"
			aria-checked="${(x) => x.checked}"
			aria-required="${(x) => x.required}"
			aria-disabled="${(x) => x.disabled}"
			aria-readonly="${(x) => x.readOnly}"
			tabindex="${(x) => x.disabled ? null : 0}"
			@keypress="${(x, c) => x.keypressHandler(c.event)}"
			@click="${(x, c) => x.clickHandler(c.event)}">
			<div class="control">
				${when((x) => x.checked, html`<${iconTag} name="check-solid" class="icon"></${iconTag}>`)}
				${when((x) => x.indeterminate, html`<${iconTag} name="minus-solid" class="icon"></${iconTag}>`)}
				${() => focusTemplate}
			</div>
			${html`<label>${(x) => x.label}<slot ${slotted("slottedContent")}></slot></label>`}
		</div>
		${when((x) => x.helperText?.length, getFeedbackTemplate("helper", context))}
		${when((x) => !x.successText && x.errorValidationMessage, getFeedbackTemplate("error", context))}
		${when((x) => x.successText, getFeedbackTemplate("success", context))}`;
};

const checkboxDefinition = Checkbox.compose({
  baseName: "checkbox",
  template: CheckboxTemplate,
  styles,
  shadowOptions: {
    delegatesFocus: true
  }
});
const checkboxRegistries = [checkboxDefinition(), ...iconRegistries, ...focusRegistries];
const registerCheckbox = registerFactory(checkboxRegistries);

export { checkboxRegistries as a, checkboxDefinition as c, registerCheckbox as r };
