import { a as attr, F as FoundationElement, h as html, r as registerFactory } from './index.js';
import { E as Elevation, e as elevationRegistries } from './definition57.js';
import { c as classNames } from './class-names.js';

const styles = "/**\n * Do not edit directly\n * Generated on Tue, 17 Oct 2023 15:27:52 GMT\n */\n.base {\n  z-index: 1;\n  block-size: calc(calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2))) + calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 16)));\n  font: var(--vvd-typography-heading-4);\n  inline-size: 100%;\n}\n.base .header-content {\n  display: inline-flex;\n  align-items: center;\n  column-gap: 4px;\n}\n\n.container {\n  display: flex;\n  box-sizing: border-box;\n  justify-content: space-between;\n  background-color: var(--header-bg-color, var(--vvd-color-canvas));\n  block-size: inherit;\n  color: var(--vvd-color-canvas-text);\n  column-gap: 12px;\n  padding-block: 8px;\n  padding-inline: 16px;\n}\n.container[part~=vvd-theme-alternate] {\n  color-scheme: var(--vvd-color-scheme);\n}\n\n.app-content {\n  --vvd-header-block-size: calc(calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2))) + calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 16)));\n}";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
class Header extends FoundationElement {
  constructor() {
    super(...arguments);
    this.elevationShadow = false;
    this.alternate = false;
  }
}
__decorateClass([
  attr({
    attribute: "elevation-shadow",
    mode: "boolean"
  })
], Header.prototype, "elevationShadow", 2);
__decorateClass([
  attr({
    mode: "boolean"
  })
], Header.prototype, "alternate", 2);

const getPartAlternate = ({ alternate }) => classNames(
  ["vvd-theme-alternate", Boolean(alternate)]
);
const headerTemplate = (context) => {
  const elevationTag = context.tagFor(Elevation);
  return html`
    <${elevationTag} dp="4" ?no-shadow=${(x) => !x.elevationShadow}>
      <header class="base" part="base">
        <!-- a container is needed to distinguish the surface background color of the
        element from its shadow when applying elevation with alternate -->
        <div class="container" part="${getPartAlternate}">
          <section class="header-content">
            <slot></slot>
          </section>
          <section class="header-content">
            <slot name="action-items"></slot>
          </section>
        </div>
      </header>
    </${elevationTag}>
    <div class="app-content">
      <slot name="app-content"></slot>
    </div>
	`;
};

const headerDefinition = Header.compose({
  baseName: "header",
  template: headerTemplate,
  styles
});
const headerRegistries = [headerDefinition(), ...elevationRegistries];
const registerHeader = registerFactory(headerRegistries);

export { headerRegistries as a, headerDefinition as h, registerHeader as r };
