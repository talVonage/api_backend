import { d as Size, S as Shape, B as Button, a as buttonRegistries } from './definition10.js';
import { a as attr, F as FoundationElement, o as observable, v as volatile, h as html, r as registerFactory } from './index.js';
import { e as elements } from './slotted.js';
import { r as ref } from './ref.js';
import { c as children } from './children.js';
import { r as repeat } from './repeat.js';
import { c as classNames } from './class-names.js';
import { w as when } from './when.js';

const styles = "/**\n * Do not edit directly\n * Generated on Tue, 17 Oct 2023 15:27:52 GMT\n */\n.control {\n  display: inline-flex;\n  justify-content: space-between;\n}\n.control:not(.shape-pill) {\n  border-radius: 4px;\n}\n.control.shape-pill {\n  border-radius: 14px;\n}\n\n.buttons-wrapper {\n  display: flex;\n  column-gap: 4px;\n}\n\n.vwc-pagination-button[size=super-condensed] {\n  --base-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 16));\n}\n.vwc-pagination-button[size=condensed] {\n  --base-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 8));\n}\n.vwc-pagination-button[size=normal] {\n  --base-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2)));\n}\n.vwc-pagination-button::part(button) {\n  padding-inline: 0;\n}\n\n.dots {\n  align-self: center;\n  text-align: center;\n}\n.dots:not(.size-super-condensed) {\n  font: var(--vvd-typography-base-bold);\n}\n.dots.size-super-condensed {\n  font: var(--vvd-typography-base-condensed-bold);\n  inline-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 16));\n}\n.dots.size-condensed {\n  inline-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 8));\n}\n.dots.size-normal {\n  inline-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2)));\n}";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
const MAX_DIGITS_AND_PLACEHOLDERS = 7;
const totalConverter = {
  fromView: (value) => parseInt(value, 10),
  toView: (value) => value.toString()
};
class Pagination extends FoundationElement {
  constructor() {
    super();
    this.navIcons = false;
    this.total = 0;
    this.selectedIndex = 0;
    this.addEventListener("tabpressed", (e) => {
      const { value: currentLabel, shiftKey } = e.detail;
      const index = this.paginationButtons.findIndex((button) => Number(button.label) === currentLabel);
      const focusDirection = shiftKey ? -1 : 1;
      const newIndex = index + focusDirection;
      if (newIndex < 0) {
        return this.prevButton.focus();
      }
      if (newIndex > this.paginationButtons.length - 1) {
        return this.nextButton.focus();
      }
      this.paginationButtons && this.paginationButtons[index + focusDirection].focus();
    });
  }
  get pagesList() {
    return new Array(this.total < MAX_DIGITS_AND_PLACEHOLDERS ? this.total : MAX_DIGITS_AND_PLACEHOLDERS).fill(0).map((_, i, arr) => {
      if (i === 0)
        return 1;
      if (i === arr.length - 1)
        return this.total;
      if (this.selectedIndex !== void 0 && this.total > MAX_DIGITS_AND_PLACEHOLDERS) {
        if (this.selectedIndex < 4) {
          if (i === MAX_DIGITS_AND_PLACEHOLDERS - 2)
            return "...";
        }
        if (this.selectedIndex >= 4 && this.selectedIndex <= this.total - 5) {
          if (i > 1 && i < MAX_DIGITS_AND_PLACEHOLDERS - 2)
            return this.selectedIndex + (i - 2);
          if (i === 1 || i === MAX_DIGITS_AND_PLACEHOLDERS - 2)
            return "...";
        }
        if (this.selectedIndex > this.total - 5) {
          if (i > 1)
            return this.total - (6 - i);
          if (i === 1)
            return "...";
        }
      }
      return i + 1;
    });
  }
  totalChanged(_, newValue) {
    if (newValue < 0) {
      this.total = 0;
    }
    this.selectedIndex = 0;
  }
  selectedIndexChanged(oldValue, newValue) {
    if (oldValue === void 0)
      return;
    this.$emit("pagination-change", { selectedIndex: newValue, total: this.total, oldIndex: oldValue });
  }
  paginationButtonsChanged(_, newValue) {
    newValue.forEach((button) => {
      button.shadowRoot.querySelector("button").setAttribute("part", "button");
    });
  }
}
__decorateClass([
  attr
], Pagination.prototype, "size", 2);
__decorateClass([
  attr
], Pagination.prototype, "shape", 2);
__decorateClass([
  observable
], Pagination.prototype, "paginationButtons", 2);
__decorateClass([
  observable
], Pagination.prototype, "prevButton", 2);
__decorateClass([
  observable
], Pagination.prototype, "nextButton", 2);
__decorateClass([
  attr({ attribute: "nav-icons", mode: "boolean" })
], Pagination.prototype, "navIcons", 2);
__decorateClass([
  volatile
], Pagination.prototype, "pagesList", 1);
__decorateClass([
  attr({ mode: "reflect", converter: totalConverter })
], Pagination.prototype, "total", 2);
__decorateClass([
  attr({ mode: "reflect", converter: totalConverter, attribute: "selected-index" })
], Pagination.prototype, "selectedIndex", 2);

const ALLOWED_SIZES = [Size.SuperCondensed, Size.Condensed, Size.Normal];
const ALLOWED_SHAPES = [Shape.Rounded, Shape.Pill];
const handleSelection = (value, { parent: x }) => {
  return x.selectedIndex = Number(value) - 1;
};
const handleKeyDown = (value, { event, parent }) => {
  if (event.key === " " || event.key === "Enter") {
    handleSelection(value, { parent });
  }
  if (event.key === "Tab") {
    event.target.dispatchEvent(
      new CustomEvent("tabpressed", { detail: { value, shiftKey: event.shiftKey }, bubbles: true, composed: true })
    );
  }
};
const getClasses = (_) => classNames("control");
function getButtonAppearance(value, { parent }) {
  return parent.selectedIndex === Number(value) - 1 ? "filled" : "ghost";
}
const paginationButtonRenderer = (buttonTag) => html`
	${when(
  (value) => value !== "...",
  html`
		<${buttonTag} class="vwc-pagination-button"
									label="${(value) => value}"
									appearance="${getButtonAppearance}"
									size="${(_, { parent: x }) => getPaginationSize(x)}"
									shape="${(_, { parent: x }) => getPaginationShape(x)}"
									style="inline-size: ${(value) => getPaginationButtonWidth(value)};"
									tabindex="0"
									aria-current="${(value, { parent }) => parent.selectedIndex === Number(value) - 1}"
									@click="${handleSelection}"
									@keydown="${handleKeyDown}">
		</${buttonTag}>
	`
)}
	${when(
  (value) => value === "...",
  html`
		<div
			class="dots size-${(_, { parent: x }) => getPaginationSize(x)}">
			...
		</div>`
)}`;
const getPaginationSize = (x) => {
  if (!x.size || !ALLOWED_SIZES.includes(x.size)) {
    return Size.SuperCondensed;
  }
  return x.size;
};
const getPaginationShape = (x) => {
  if (!x.shape || !ALLOWED_SHAPES.includes(x.shape)) {
    return Shape.Rounded;
  }
  return x.shape;
};
const getPaginationButtonWidth = (value) => {
  return `calc(var(--base-size) + ${String(value).length - 1}ch)`;
};
const PaginationTemplate = (context) => {
  const buttonTag = context.tagFor(Button);
  const paginationButtonTemplate = paginationButtonRenderer(buttonTag);
  return html`
	<div class="${getClasses}">
		<${buttonTag} class="prev-button" ${ref("prevButton")}
									label="${(x) => !x.navIcons ? "Previous" : null}"
									icon="${(x) => x.navIcons ? "chevron-left-line" : null}"
									size="${getPaginationSize}"
									shape="${getPaginationShape}"
									?disabled="${(x) => x.total === 0 || x.selectedIndex === 0}"
									@click="${(x) => x.selectedIndex !== void 0 && x.selectedIndex--}"
		></${buttonTag}>
		<div id="buttons-wrapper" class="buttons-wrapper" ${children({ property: "paginationButtons", filter: elements(buttonTag) })}>
			${repeat((x) => x.pagesList, paginationButtonTemplate, { positioning: true })}
		</div>
		<${buttonTag} class="next-button" ${ref("nextButton")}
									label="${(x) => !x.navIcons ? "Next" : null}"
									icon="${(x) => x.navIcons ? "chevron-right-line" : null}"
									size="${getPaginationSize}"
									shape="${getPaginationShape}"
									?disabled="${(x) => x.total === 0 || x.selectedIndex === x.total - 1}"
									@click="${(x) => x.selectedIndex !== void 0 && x.selectedIndex++}"
		></${buttonTag}>
</div>`;
};

const paginationDefinition = Pagination.compose({
  baseName: "pagination",
  template: PaginationTemplate,
  styles
});
const paginationRegistries = [paginationDefinition(), buttonRegistries];
const registerPagination = registerFactory(paginationRegistries);

export { paginationRegistries as a, paginationDefinition as p, registerPagination as r };
