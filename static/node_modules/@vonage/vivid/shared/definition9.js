import { F as FoundationElement, _ as __decorate, o as observable, h as html, r as registerFactory } from './index.js';
import { s as slotted, e as elements } from './slotted.js';
import { B as BreadcrumbItem$1 } from './breadcrumb-item.js';

/**
 * A Breadcrumb Custom HTML Element.
 * @slot - The default slot for the breadcrumb items
 * @csspart list - The element wrapping the slotted items
 *
 * @public
 */
let Breadcrumb$1 = class Breadcrumb extends FoundationElement {
    slottedBreadcrumbItemsChanged() {
        if (this.$fastController.isConnected) {
            if (this.slottedBreadcrumbItems === undefined ||
                this.slottedBreadcrumbItems.length === 0) {
                return;
            }
            const lastNode = this.slottedBreadcrumbItems[this.slottedBreadcrumbItems.length - 1];
            this.slottedBreadcrumbItems.forEach((item) => {
                const itemIsLastNode = item === lastNode;
                this.setItemSeparator(item, itemIsLastNode);
                this.setAriaCurrent(item, itemIsLastNode);
            });
        }
    }
    setItemSeparator(item, isLastNode) {
        if (item instanceof BreadcrumbItem$1) {
            item.separator = !isLastNode;
        }
    }
    /**
     * Finds href on childnodes in the light DOM or shadow DOM.
     * We look in the shadow DOM because we insert an anchor when breadcrumb-item has an href.
     */
    findChildWithHref(node) {
        var _a, _b;
        if (node.childElementCount > 0) {
            return node.querySelector("a[href]");
        }
        else if ((_a = node.shadowRoot) === null || _a === void 0 ? void 0 : _a.childElementCount) {
            return (_b = node.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector("a[href]");
        }
        else
            return null;
    }
    /**
     *  Sets ARIA Current for the current node
     * If child node with an anchor tag and with href is found then set aria-current to correct value for the child node,
     * otherwise apply aria-current to the host element, with an href
     */
    setAriaCurrent(item, isLastNode) {
        const childNodeWithHref = this.findChildWithHref(item);
        if (childNodeWithHref === null &&
            item.hasAttribute("href") &&
            item instanceof BreadcrumbItem$1) {
            isLastNode
                ? item.setAttribute("aria-current", "page")
                : item.removeAttribute("aria-current");
        }
        else if (childNodeWithHref !== null) {
            isLastNode
                ? childNodeWithHref.setAttribute("aria-current", "page")
                : childNodeWithHref.removeAttribute("aria-current");
        }
    }
};
__decorate([
    observable
], Breadcrumb$1.prototype, "slottedBreadcrumbItems", void 0);

const breadcrumbTemplate = () => html`
	<nav aria-label="breadcrumbs" class="base">
    <div role="list" class="list">
      <slot
        ${slotted({
  property: "slottedBreadcrumbItems",
  filter: elements()
})}
      ></slot>
    </div>
	</nav>
`;

const styles = ".list {\n  display: flex;\n}";

class Breadcrumb extends Breadcrumb$1 {
}

const breadcrumbDefinition = Breadcrumb.compose({
  baseName: "breadcrumb",
  template: breadcrumbTemplate,
  styles
});
const breadcrumbRegistries = [breadcrumbDefinition()];
const registerBreadcrumb = registerFactory(breadcrumbRegistries);

export { breadcrumbRegistries as a, breadcrumbDefinition as b, registerBreadcrumb as r };
