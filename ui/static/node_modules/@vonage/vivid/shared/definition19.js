import { a as attr, F as FoundationElement, o as observable, h as html, r as registerFactory } from './index.js';
import { a as iconRegistries } from './definition25.js';
import { B as Button, a as buttonRegistries } from './definition10.js';
import { E as Elevation, e as elevationRegistries } from './definition57.js';
import { I as Icon } from './icon.js';
import { w as when } from './when.js';
import { s as slotted } from './slotted.js';
import { c as classNames } from './class-names.js';

const dialogPolyfillStyles = "dialog {\n  position: absolute;\n  left: 0; right: 0;\n  width: -moz-fit-content;\n  width: -webkit-fit-content;\n  width: fit-content;\n  height: -moz-fit-content;\n  height: -webkit-fit-content;\n  height: fit-content;\n  margin: auto;\n  border: solid;\n  padding: 1em;\n  background: white;\n  color: black;\n  display: block;\n}\n\ndialog:not([open]) {\n  display: none;\n}\n\ndialog + .backdrop {\n  position: fixed;\n  top: 0; right: 0; bottom: 0; left: 0;\n  background: rgba(0,0,0,0.1);\n}\n\n._dialog_overlay {\n  position: fixed;\n  top: 0; right: 0; bottom: 0; left: 0;\n}\n\ndialog.fixed {\n  position: fixed;\n  top: 50%;\n  transform: translate(0, -50%);\n}";

const styles = "/**\n * Do not edit directly\n * Generated on Tue, 17 Oct 2023 15:27:52 GMT\n */\n.base {\n  box-sizing: border-box;\n  padding: 0;\n  border: none;\n  background-color: transparent;\n  border-radius: 6px;\n  color: var(--vvd-color-canvas-text);\n  max-block-size: var(--dialog-max-block-size, calc(100vh - 64px));\n  max-inline-size: var(--dialog-max-inline-size, var(--_dialog-default-max-inline-size));\n  min-inline-size: var(--dialog-min-inline-size, 280px);\n}\n@media not all and (min-width: 600px) {\n  .base {\n    --_dialog-default-max-inline-size: 90vw;\n  }\n}\n@media (min-width: 600px) {\n  .base {\n    --_dialog-default-max-inline-size: 560px;\n  }\n}\n.base:not(.modal) {\n  z-index: var(--dialog-z-index, 1);\n}\n.base.modal {\n  position: fixed;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.35);\n}\n.base.modal::backdrop {\n  background-color: var(--vvd-color-canvas-text, currentColor);\n  opacity: 0.5;\n}\n\n.main-wrapper {\n  display: flex;\n  box-sizing: border-box;\n  flex-direction: column;\n  gap: 24px;\n  padding-block: 24px;\n}\n.main-wrapper > * {\n  box-sizing: border-box;\n}\n\n.header {\n  display: grid;\n  align-items: flex-start;\n  justify-content: space-between;\n  inline-size: 100%;\n  padding-inline: 24px;\n}\n.base:not(.icon-placement-side) .header {\n  grid-template-columns: 1fr auto;\n  grid-template-rows: auto auto auto;\n}\n.base:not(.icon-placement-side) .header .icon {\n  font-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 8));\n  grid-column: 1/2;\n  grid-row: 1/2;\n  line-height: 1;\n  margin-block-end: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 16));\n}\n.base.icon-placement-side .header {\n  grid-template-columns: auto 1fr auto;\n  grid-template-rows: auto auto;\n}\n.base.icon-placement-side .header .icon {\n  font-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 12));\n}\n.base.icon-placement-side .header ::slotted(*),\n.base.icon-placement-side .header .icon {\n  grid-column: 1/2;\n  grid-row: 1/-1;\n  margin-inline-end: calc(calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 8)) / 2);\n}\n.header.border {\n  position: relative;\n}\n.header.border::after {\n  position: absolute;\n  bottom: -24px;\n  left: 0;\n  background-color: var(--vvd-color-neutral-200);\n  block-size: 1px;\n  content: \"\";\n  inline-size: 100%;\n}\n.base.hide-body .header.border::after {\n  content: none;\n}\n\n.body:not(.full-width) {\n  padding-inline: 24px;\n}\n.hide-body .body {\n  display: none;\n}\n\n.footer {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 24px;\n  padding-inline: 24px;\n}\n.hide-footer .footer {\n  display: none;\n}\n.footer .actions {\n  display: flex;\n  align-self: flex-end;\n  gap: 8px;\n}\n\n.dismiss-button {\n  flex-shrink: 0;\n  grid-column: -2/-1;\n  grid-row: 1/-1;\n  margin-block-start: -8px;\n  margin-inline-end: -8px;\n  margin-inline-start: 4px;\n}\n\n.headline {\n  font: var(--vvd-typography-heading-4);\n}\n\n.subtitle {\n  font: var(--vvd-typography-base);\n}\n\nslot[name=main] {\n  display: block;\n  overflow: hidden auto;\n  max-width: inherit;\n  max-height: inherit;\n  border-radius: inherit;\n}";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
const isDialogSupported = Boolean(HTMLDialogElement && HTMLDialogElement.prototype.showModal);
let dialogPolyfill;
(async () => {
  if (!isDialogSupported) {
    delete window.HTMLDialogElement;
    dialogPolyfill = await import('./dialog-polyfill.esm.js');
  }
})();
class Dialog extends FoundationElement {
  constructor() {
    super(...arguments);
    this.open = false;
    this.fullWidthBody = false;
    this.ariaLabelledBy = null;
    this.ariaLabel = null;
    this.ariaDescribedBy = null;
    this.#modal = false;
    this.#handleScrimClick = (event) => {
      if (event.target !== this.#dialog) {
        return;
      }
      const rect = this.#dialog.getBoundingClientRect();
      const clickedInDialog = rect.top <= event.clientY && event.clientY <= rect.top + rect.height && rect.left <= event.clientX && event.clientX <= rect.left + rect.width;
      this.open = clickedInDialog;
    };
    this.#handleInternalFormSubmit = (event) => {
      if (event.target.method !== "dialog") {
        return;
      }
      this.open = false;
    };
  }
  #modal;
  set returnValue(value) {
    this.#dialog.returnValue = value;
  }
  get returnValue() {
    return this.#dialog?.returnValue;
  }
  get modal() {
    return this.#modal;
  }
  #dialogElement;
  get #dialog() {
    if (!this.#dialogElement) {
      this.#dialogElement = this.shadowRoot.querySelector("dialog");
      if (this.#dialogElement) {
        this.#dialogElement.open = this.open;
        if (dialogPolyfill) {
          dialogPolyfill.registerDialog(this.#dialogElement);
        }
      }
    }
    return this.#dialogElement;
  }
  openChanged(oldValue, newValue) {
    if (oldValue === void 0) {
      return;
    }
    if (!newValue) {
      this.close();
    } else {
      if (this.#dialog) {
        this.#dialog.open = true;
      }
    }
  }
  #handleScrimClick;
  #handleInternalFormSubmit;
  close() {
    if (this.#dialog.open) {
      this.#dialog.close();
      this.$emit("close", this.returnValue, { bubbles: false });
    }
    this.open = false;
    this.#handleModal(false);
  }
  #handleModal(show) {
    this.#modal = show;
    this.#dialog.toggleAttribute("aria-modal", show);
    this.#dialog.classList.toggle("modal", show);
  }
  show() {
    this.#dialog.show();
    this.open = true;
  }
  showModal() {
    this.#handleModal(true);
    this.#dialog.showModal();
    this.open = true;
  }
  connectedCallback() {
    super.connectedCallback();
    this.#dialog.addEventListener("mousedown", this.#handleScrimClick);
    this.#dialog.addEventListener("submit", this.#handleInternalFormSubmit);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.#dialog.removeEventListener("mousedown", this.#handleScrimClick);
    this.#dialog.removeEventListener("submit", this.#handleInternalFormSubmit);
  }
}
__decorateClass([
  attr({ mode: "boolean" })
], Dialog.prototype, "open", 2);
__decorateClass([
  attr
], Dialog.prototype, "icon", 2);
__decorateClass([
  attr({ attribute: "icon-placement" })
], Dialog.prototype, "iconPlacement", 2);
__decorateClass([
  attr
], Dialog.prototype, "subtitle", 2);
__decorateClass([
  attr
], Dialog.prototype, "headline", 2);
__decorateClass([
  attr({ attribute: "full-width-body", mode: "boolean" })
], Dialog.prototype, "fullWidthBody", 2);
__decorateClass([
  attr({ attribute: "aria-labelledby" })
], Dialog.prototype, "ariaLabelledBy", 2);
__decorateClass([
  attr({ attribute: "aria-label" })
], Dialog.prototype, "ariaLabel", 2);
__decorateClass([
  attr({ attribute: "aria-describedby" })
], Dialog.prototype, "ariaDescribedBy", 2);
__decorateClass([
  observable
], Dialog.prototype, "bodySlottedContent", 2);
__decorateClass([
  observable
], Dialog.prototype, "footerSlottedContent", 2);
__decorateClass([
  observable
], Dialog.prototype, "actionItemsSlottedContent", 2);

const getClasses = ({
  iconPlacement,
  bodySlottedContent,
  footerSlottedContent,
  actionItemsSlottedContent
}) => classNames(
  "base",
  [`icon-placement-${iconPlacement}`, Boolean(iconPlacement)],
  ["hide-body", !bodySlottedContent?.length],
  [
    "hide-footer",
    !(footerSlottedContent?.length || actionItemsSlottedContent?.length)
  ]
);
function icon(iconTag) {
  return html`
		<${iconTag} class="icon" name="${(x) => x.icon}"></${iconTag}>
	`;
}
function headline() {
  return html`
	  <div class="headline">
		  ${(x) => x.headline}
	  </div>
	`;
}
function subtitle() {
  return html`
	  <div class="subtitle">
		  ${(x) => x.subtitle}
	  </div>
	`;
}
function renderDismissButton(buttonTag) {
  return html`
	  <${buttonTag}
			  size="condensed"
			  class="dismiss-button"
			  icon="close-line"
			  @click="${(x) => {
    x.open = false;
  }}">
	  </${buttonTag}>`;
}
function handleEscapeKey(dialog, event) {
  if (event.key === "Escape" && dialog.modal) {
    dialog.open = false;
  }
  return true;
}
const DialogTemplate = (context) => {
  const elevationTag = context.tagFor(Elevation);
  const iconTag = context.tagFor(Icon);
  const buttonTag = context.tagFor(Button);
  return html`
	<${elevationTag} dp="8">
		<dialog class="${getClasses}"
				@keydown="${(x, c) => handleEscapeKey(x, c.event)}"
				returnValue="${(x) => x.returnValue}"
				aria-labelledby="${(x) => x.ariaLabelledBy}"
				aria-label="${(x) => x.ariaLabel}"
				aria-describedby="${(x) => x.ariaDescribedBy}"
		>
			<slot name="main">
				<div class="main-wrapper">
					<div class="header ${(x) => x.subtitle ? "border" : ""}">
							<slot name="graphic">
								${when((x) => x.icon, icon(iconTag))}
							</slot>
							${when((x) => x.headline, headline())}
							${when((x) => x.subtitle, subtitle())}
							${renderDismissButton(buttonTag)}
					</div>
					<div class="body ${(x) => x.fullWidthBody ? "full-width" : ""}" >
						<slot name="body" ${slotted("bodySlottedContent")}></slot>
					</div>
					<div class="footer">
						<div>
							<slot name="footer" ${slotted("footerSlottedContent")}></slot>
						</div>
						<div class="actions">
							<slot name="action-items" ${slotted("actionItemsSlottedContent")}></slot>
						</div>
					</div>
				</div>
			</slot>
		</dialog>
	</${elevationTag}>`;
};

const dialogDefinition = Dialog.compose({
  baseName: "dialog",
  template: DialogTemplate,
  styles: isDialogSupported ? [styles] : [styles, dialogPolyfillStyles]
});
const dialogRegistries = [dialogDefinition(), ...iconRegistries, ...buttonRegistries, ...elevationRegistries];
const registerDialog = registerFactory(dialogRegistries);

export { dialogRegistries as a, dialogDefinition as d, registerDialog as r };
