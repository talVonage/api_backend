import { a as attr, F as FoundationElement, h as html, r as registerFactory } from './index.js';
import { c as classNames } from './class-names.js';

const styles = ".base {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n}";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
class TagGroup extends FoundationElement {
  constructor() {
    super(...arguments);
    this.ariaLabel = null;
  }
}
__decorateClass([
  attr({ attribute: "aria-label" })
], TagGroup.prototype, "ariaLabel", 2);

const getClasses = (_) => classNames(
  "base"
);
const TagGroupTemplate = () => {
  return html`
		<div class="${getClasses}" role="listbox" aria-orientation="horizontal" aria-label="${(x) => x.ariaLabel}">
			<slot></slot>
		</div>
	`;
};

const tagGroupDefinition = TagGroup.compose(
  {
    baseName: "tag-group",
    template: TagGroupTemplate,
    styles
  }
);
const tagGroupRegistries = [tagGroupDefinition()];
const registerTagGroup = registerFactory(tagGroupRegistries);

export { tagGroupRegistries as a, registerTagGroup as r, tagGroupDefinition as t };
