import { F as FoundationElement, a as attr, h as html, r as registerFactory } from './index.js';
import { a as iconRegistries } from './definition25.js';
import { I as Icon } from './icon.js';
import { w as when } from './when.js';
import { c as classNames } from './class-names.js';

const styles = "/**\n * Do not edit directly\n * Generated on Tue, 17 Oct 2023 15:27:52 GMT\n */\n.base {\n  display: inline-flex;\n  overflow: hidden;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--_appearance-color-fill);\n  block-size: var(--_size);\n  box-shadow: inset 0 0 0 1px var(--_appearance-color-outline);\n  color: var(--_appearance-color-text);\n  inline-size: var(--_size);\n  vertical-align: middle;\n}\n.base.connotation-cta {\n  /* @cssprop [--vvd-avatar-cta-primary=var(--vvd-color-cta-500)] */\n  --_connotation-color-primary: var(--vvd-avatar-cta-primary, var(--vvd-color-cta-500));\n  /* @cssprop [--vvd-avatar-cta-primary-text=var(--vvd-color-canvas)] */\n  --_connotation-color-primary-text: var(--vvd-avatar-cta-primary-text, var(--vvd-color-canvas));\n  /* @cssprop [--vvd-avatar-cta-firm=var(--vvd-color-cta-600)] */\n  --_connotation-color-firm: var(--vvd-avatar-cta-firm, var(--vvd-color-cta-600));\n  /* @cssprop [--vvd-avatar-cta-fierce=var(--vvd-color-cta-700)] */\n  --_connotation-color-fierce: var(--vvd-avatar-cta-fierce, var(--vvd-color-cta-700));\n  /* @cssprop [--vvd-avatar-cta-pale=var(--vvd-color-cta-300)] */\n  --_connotation-color-pale: var(--vvd-avatar-cta-pale, var(--vvd-color-cta-300));\n  /* @cssprop [--vvd-avatar-cta-soft=var(--vvd-color-cta-100)] */\n  --_connotation-color-soft: var(--vvd-avatar-cta-soft, var(--vvd-color-cta-100));\n}\n.base:not(.connotation-cta) {\n  /* @cssprop [--vvd-avatar-accent-primary=var(--vvd-color-canvas-text)] */\n  --_connotation-color-primary: var(--vvd-avatar-accent-primary, var(--vvd-color-canvas-text));\n  /* @cssprop [--vvd-avatar-accent-primary-text=var(--vvd-color-canvas)] */\n  --_connotation-color-primary-text: var(--vvd-avatar-accent-primary-text, var(--vvd-color-canvas));\n  /* @cssprop [--vvd-avatar-accent-firm=var(--vvd-color-canvas-text)] */\n  --_connotation-color-firm: var(--vvd-avatar-accent-firm, var(--vvd-color-canvas-text));\n  /* @cssprop [--vvd-avatar-accent-fierce=var(--vvd-color-neutral-700)] */\n  --_connotation-color-fierce: var(--vvd-avatar-accent-fierce, var(--vvd-color-neutral-700));\n  /* @cssprop [--vvd-avatar-accent-pale=var(--vvd-color-neutral-300)] */\n  --_connotation-color-pale: var(--vvd-avatar-accent-pale, var(--vvd-color-neutral-300));\n  /* @cssprop [--vvd-avatar-accent-soft=var(--vvd-color-neutral-100)] */\n  --_connotation-color-soft: var(--vvd-avatar-accent-soft, var(--vvd-color-neutral-100));\n}\n.base {\n  --_appearance-color-text: var(--_connotation-color-primary-text);\n  --_appearance-color-fill: var(--_connotation-color-primary);\n  --_appearance-color-outline: transparent;\n}\n.base.appearance-outlined {\n  --_appearance-color-text: var(--_connotation-color-firm);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: var(--_connotation-color-firm);\n}\n.base.appearance-duotone {\n  --_appearance-color-text: var(--_connotation-color-fierce);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: var(--_connotation-color-pale);\n}\n.base.appearance-subtle {\n  --_appearance-color-text: var(--_connotation-color-contrast);\n  --_appearance-color-fill: var(--_connotation-color-soft);\n  --_appearance-color-outline: transparent;\n}\n.base.size-condensed {\n  --_size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 8));\n}\n.base.size-condensed .initials {\n  font: var(--vvd-typography-base-condensed-bold);\n}\n.base.size-condensed .icon {\n  font-size: calc(calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 8)) / 2);\n  line-height: 1;\n}\n.base.size-expanded {\n  --_size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) + 8));\n}\n.base.size-expanded .initials {\n  font: var(--vvd-typography-heading-4);\n}\n.base.size-expanded .icon {\n  font-size: calc(calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) + 8)) / 2);\n  line-height: 1;\n}\n.base:not(.size-condensed, .size-expanded) {\n  --_size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2)));\n}\n.base:not(.size-condensed, .size-expanded) .initials {\n  font: var(--vvd-typography-base-extended-bold);\n}\n.base:not(.size-condensed, .size-expanded) .icon {\n  font-size: calc(calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2))) / 2);\n  line-height: 1;\n}\n.base:not(.shape-pill) {\n  border-radius: 6px;\n}\n.base.shape-pill {\n  border-radius: 50%;\n}\n.base .initials {\n  text-transform: uppercase;\n}\n.base ::slotted(*) {\n  block-size: 100%;\n  inline-size: 100%;\n  object-fit: cover;\n}";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
class Avatar extends FoundationElement {
}
__decorateClass([
  attr
], Avatar.prototype, "connotation", 2);
__decorateClass([
  attr
], Avatar.prototype, "shape", 2);
__decorateClass([
  attr
], Avatar.prototype, "appearance", 2);
__decorateClass([
  attr
], Avatar.prototype, "size", 2);
__decorateClass([
  attr
], Avatar.prototype, "icon", 2);
__decorateClass([
  attr
], Avatar.prototype, "initials", 2);

const getClasses = ({ appearance, connotation, shape, size }) => classNames(
  "base",
  [`connotation-${connotation}`, Boolean(connotation)],
  [`appearance-${appearance}`, Boolean(appearance)],
  [`shape-${shape}`, Boolean(shape)],
  [`size-${size}`, Boolean(size)]
);
function renderIcon(iconTag) {
  return html`
		<span class="icon">
			<${iconTag} name="${(x) => x.icon ? `${x.icon}` : "user-line"}"></${iconTag}>
		</span>
	`;
}
function renderInitials() {
  return html`
		<span class="initials">${({ initials }) => initials.substring(0, 2)}</span>
	`;
}
const AvatarTemplate = (context) => {
  const iconTag = context.tagFor(Icon);
  return html`
	<span class="${getClasses}">
		<slot name="graphic">
			${when((x) => x.initials, renderInitials())}
			${when((x) => !x.initials, renderIcon(iconTag))}
		</slot>
</span>`;
};

const avatarDefinition = Avatar.compose({
  baseName: "avatar",
  template: AvatarTemplate,
  styles
});
const avatarRegistries = [avatarDefinition(), ...iconRegistries];
const registerAvatar = registerFactory(avatarRegistries);

export { avatarDefinition as a, avatarRegistries as b, registerAvatar as r };
