import { A as AffixIcon } from './affix.js';
import { A as Anchor } from './anchor.js';
import { a as applyMixins } from './apply-mixins.js';
import { a as attr } from './index.js';

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
class TextAnchor extends Anchor {
  /**
   * Allows subclasses to provide a body template that will be rendered inside the anchor.
   * @internal
   */
  getBodyTemplate() {
    return void 0;
  }
}
__decorateClass([
  attr
], TextAnchor.prototype, "text", 2);
applyMixins(TextAnchor, AffixIcon);

export { TextAnchor as T };
