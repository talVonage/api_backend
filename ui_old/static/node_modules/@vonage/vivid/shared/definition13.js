import { F as FoundationElement, a as attr, o as observable, h as html, r as registerFactory } from './index.js';
import { a as iconRegistries } from './definition25.js';
import { E as Elevation, e as elevationRegistries } from './definition57.js';
import { I as Icon } from './icon.js';
import { w as when } from './when.js';
import { s as slotted } from './slotted.js';
import { c as classNames } from './class-names.js';

const styles = "/**\n * Do not edit directly\n * Generated on Tue, 17 Oct 2023 15:27:52 GMT\n */\n:host {\n  display: flex;\n}\n\n.base {\n  border-radius: 6px;\n  inline-size: 100%;\n  text-align: start;\n}\n\n.wrapper {\n  display: flex;\n  overflow: hidden;\n  flex-flow: column;\n  block-size: 100%;\n  border-radius: inherit;\n  color: var(--vvd-color-canvas-text);\n}\n\n.main-content {\n  display: flex;\n  flex-flow: column;\n  padding: 24px;\n}\n\n.header {\n  display: flex;\n  flex: 1;\n  align-items: flex-start;\n  gap: 8px;\n}\n.header-content {\n  flex: 1;\n}\n.header-wrapper {\n  display: flex;\n  gap: 8px;\n}\n.header-headline, .header-subtitle {\n  /* stylelint-disable value-no-vendor-prefix */\n  display: -webkit-box;\n  /* stylelint-enable value-no-vendor-prefix */\n  overflow: hidden;\n  -webkit-box-orient: vertical;\n}\n.header-headline {\n  font: var(--vvd-typography-heading-4);\n  -webkit-line-clamp: var(--headline-line-clamp);\n}\n.header-subtitle {\n  font: var(--vvd-typography-base);\n  -webkit-line-clamp: var(--subtitle-line-clamp);\n}\n.hide-header .header {\n  display: none;\n}\n\n.header-subtitle,\n.text {\n  color: var(--vvd-color-neutral-600);\n  font: var(--vvd-typography-base);\n}\n\n.text {\n  padding-right: 8px;\n  margin-top: 12px;\n}\n\n.footer {\n  display: inline-flex;\n  flex-direction: column;\n  align-items: flex-end;\n  padding-bottom: 24px;\n  margin-top: auto;\n  padding-inline: 24px;\n}\n.hide-footer .footer {\n  display: none;\n}\n\n::slotted([slot=graphic i]),\n.icon {\n  flex-shrink: 0;\n  align-self: baseline;\n  margin-block-start: 4px;\n}\n\n.icon {\n  font-size: 20px;\n}\n\n::slotted([slot=meta i]) {\n  flex-shrink: 0;\n  align-self: flex-start;\n  margin-block-start: -8px;\n  margin-inline-end: -8px;\n  margin-inline-start: auto;\n}";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
class Card extends FoundationElement {
}
__decorateClass([
  attr
], Card.prototype, "headline", 2);
__decorateClass([
  attr
], Card.prototype, "subtitle", 2);
__decorateClass([
  attr
], Card.prototype, "text", 2);
__decorateClass([
  attr
], Card.prototype, "icon", 2);
__decorateClass([
  attr
], Card.prototype, "elevation", 2);
__decorateClass([
  observable
], Card.prototype, "footerSlottedContent", 2);
__decorateClass([
  observable
], Card.prototype, "graphicSlottedContent", 2);
__decorateClass([
  observable
], Card.prototype, "hasMetaSlottedContent", 2);

const getClasses = (_) => classNames(
  "base",
  ["hide-footer", !_.footerSlottedContent || !_.footerSlottedContent.length],
  ["hide-header", shouldHideHeader(_)]
);
function renderHeaderIcon(iconTag) {
  return html`
	  <${iconTag} class="icon" inline name="${(x) => x.icon}"></${iconTag}>`;
}
function Headline() {
  return html`
		<div class="header-headline">${(x) => x.headline}</div>
	`;
}
function Subtitle() {
  return html`
		<div class="header-subtitle">${(x) => x.subtitle}</div>
	`;
}
function headerContent() {
  return html`
		<div class="header-content">
			${when((x) => x.headline, Headline())}
			${when((x) => x.subtitle, Subtitle())}
		</div>
	`;
}
function renderHeader(iconTag) {
  return html`
		<header class="header">
			<slot name="graphic" ${slotted("graphicSlottedContent")}>${when((x) => x.icon, renderHeaderIcon(iconTag))}</slot>
			${when((x) => x.headline || x.subtitle, headerContent())}
		</header>`;
}
function shouldHideHeader(card) {
  return !card.headline && !card.subtitle && !card.icon && (!card.graphicSlottedContent || !card.graphicSlottedContent.length);
}
function renderMetaSlot() {
  return html`
		<slot name="meta" ${slotted("metaSlottedContent")}></slot>
	`;
}
function text() {
  return html`
		<div class="text">${(x) => x.text}</div>
	`;
}
const CardTemplate = (context) => {
  const elevationTag = context.tagFor(Elevation);
  const iconTag = context.tagFor(Icon);
  return html`
	<${elevationTag} dp=${(x) => x.elevation ?? "4"}>

		<div class="${getClasses}">
			<div class="wrapper">
				<div class="vwc-card-media">
					<slot name="media"></slot>
				</div>
				<slot name="main">
					<div class="main-content">
						<div class="header-wrapper">
							${renderHeader(iconTag)}
							${renderMetaSlot()}
						</div>
						${when((x) => x.text, text())}
					</div>
				</slot>
				<div class="footer">
					<slot name="footer" ${slotted("footerSlottedContent")}></slot>
				</div>
			</div>
		</div>

	</${elevationTag}>
`;
};

const cardDefinition = Card.compose({
  baseName: "card",
  template: CardTemplate,
  styles
});
const cardRegistries = [cardDefinition(), ...iconRegistries, ...elevationRegistries];
const registerCard = registerFactory(cardRegistries);

export { cardRegistries as a, cardDefinition as c, registerCard as r };
