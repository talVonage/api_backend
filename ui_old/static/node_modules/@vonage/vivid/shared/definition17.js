import { v as volatile, r as registerFactory } from './index.js';
import { p as popupRegistries } from './definition58.js';
import { f as focusRegistries } from './definition56.js';
import { a as buttonRegistries } from './definition10.js';
import { a as textFieldRegistries } from './definition51.js';
import { a as dividerRegistries } from './definition20.js';
import { D as DatePickerBase, i as isValidDateStr, f as formatPresentationDate, m as monthOfDate, p as parsePresentationDate, a as DatePickerBaseTemplate, s as styles } from './presentationDate.js';
import './affix.js';
import { e as errorText, f as formElements } from './index2.js';

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
let DatePicker = class extends DatePickerBase {
  constructor() {
    super();
    /**
     * @internal
     */
    this._textFieldSize = "20";
    this.proxy.type = "date";
  }
  /**
   * @internal
   */
  valueChanged(previous, next) {
    super.valueChanged(previous, next);
    if (this.value) {
      if (!isValidDateStr(this.value)) {
        this.value = "";
        return;
      }
      this._presentationValue = formatPresentationDate(
        this.value,
        this.locale.datePicker
      );
      this._selectedMonth = monthOfDate(this.value);
    } else {
      this._presentationValue = "";
    }
  }
  #updateValueDueToUserInteraction(newValue) {
    this.value = newValue;
    this.$emit("change");
    this.$emit("input");
  }
  get _calendarButtonLabel() {
    if (this.value) {
      return this.locale.datePicker.changeDateLabel(formatPresentationDate(this.value, this.locale.datePicker));
    } else {
      return this.locale.datePicker.chooseDateLabel;
    }
  }
  /**
   * @internal
   */
  get _textFieldPlaceholder() {
    return this.locale.datePicker.dateFormatPlaceholder;
  }
  /**
   * @internal
   */
  _onTextFieldChange() {
    if (this._presentationValue === "") {
      this.#updateValueDueToUserInteraction("");
      return;
    }
    try {
      this.#updateValueDueToUserInteraction(
        parsePresentationDate(this._presentationValue, this.locale.datePicker)
      );
    } catch (_) {
      return;
    }
  }
  /**
   * Handle selecting a date from the calendar.
   * @internal
   */
  _onDateClick(date) {
    this.#updateValueDueToUserInteraction(date);
    this._closePopup();
  }
  /**
   * @internal
   */
  _isDateSelected(date) {
    return date === this.value;
  }
  /**
   * @internal
   */
  _isDateAriaSelected(date) {
    return this._isDateSelected(date);
  }
  /**
   * @internal
   */
  _getSelectedDates() {
    const dates = [];
    if (this.value) {
      dates.push(this.value);
    }
    return dates;
  }
  /**
   * @internal
   */
  _getCustomValidationError() {
    if (this._isPresentationValueInvalid()) {
      return this.locale.datePicker.invalidDateError;
    }
    return null;
  }
  /**
   * @internal
   */
  _isPresentationValueInvalid() {
    if (this._presentationValue === "") {
      return false;
    }
    try {
      parsePresentationDate(this._presentationValue, this.locale.datePicker);
      return false;
    } catch (_) {
      return true;
    }
  }
  /**
   * @internal
   */
  _onClearClick() {
    this.#updateValueDueToUserInteraction("");
    super._onClearClick();
  }
};
__decorateClass([
  volatile
], DatePicker.prototype, "_calendarButtonLabel", 1);
DatePicker = __decorateClass([
  errorText,
  formElements
], DatePicker);

const datePickerDefinition = DatePicker.compose({
  baseName: "date-picker",
  template: DatePickerBaseTemplate,
  styles
});
const datePickerRegistries = [
  datePickerDefinition(),
  ...buttonRegistries,
  ...popupRegistries,
  ...textFieldRegistries,
  ...focusRegistries,
  ...dividerRegistries
];
const registerDatePicker = registerFactory(datePickerRegistries);

export { datePickerRegistries as a, datePickerDefinition as d, registerDatePicker as r };
