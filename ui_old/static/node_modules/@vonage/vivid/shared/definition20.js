import { F as FoundationElement, _ as __decorate, a as attr, h as html, r as registerFactory } from './index.js';
import { O as Orientation } from './aria.js';
import { c as classNames } from './class-names.js';

/**
 * Divider roles
 * @public
 */
const DividerRole = {
    /**
     * The divider semantically separates content
     */
    separator: "separator",
    /**
     * The divider has no semantic value and is for visual presentation only.
     */
    presentation: "presentation",
};

/**
 * A Divider Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#separator | ARIA separator } or {@link https://www.w3.org/TR/wai-aria-1.1/#presentation | ARIA presentation}.
 *
 * @public
 */
let Divider$1 = class Divider extends FoundationElement {
    constructor() {
        super(...arguments);
        /**
         * The role of the element.
         *
         * @public
         * @remarks
         * HTML Attribute: role
         */
        this.role = DividerRole.separator;
        /**
         * The orientation of the divider.
         *
         * @public
         * @remarks
         * HTML Attribute: orientation
         */
        this.orientation = Orientation.horizontal;
    }
};
__decorate([
    attr
], Divider$1.prototype, "role", void 0);
__decorate([
    attr
], Divider$1.prototype, "orientation", void 0);

const styles = "/**\n * Do not edit directly\n * Generated on Tue, 17 Oct 2023 15:27:52 GMT\n */\n:host {\n  display: block;\n}\n\n.base {\n  display: block;\n  background-color: var(--vvd-color-neutral-200);\n}\n.base:not(.vertical) {\n  block-size: 1px;\n  inline-size: 100%;\n}\n.base.vertical {\n  block-size: 100%;\n  inline-size: 1px;\n}";

class Divider extends Divider$1 {
}

const getClasses = ({ orientation }) => classNames(
  "base",
  [`${orientation}`, Boolean(orientation)]
);
const DividerTemplate = () => html` 
  <span
  class="${getClasses}"
  	orientation="${(x) => x.orientation}"
  	role="${(x) => x.role}"
  ></span>`;

const dividerDefinition = Divider.compose({
  baseName: "divider",
  template: DividerTemplate,
  styles
});
const dividerRegistries = [dividerDefinition()];
const registerDivider = registerFactory(dividerRegistries);

export { Divider as D, dividerRegistries as a, dividerDefinition as d, registerDivider as r };
