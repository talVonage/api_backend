import { F as FoundationElement, a as attr, o as observable, h as html, r as registerFactory } from './index.js';
import { a as iconRegistries } from './definition25.js';
import { I as Icon } from './icon.js';
import { w as when } from './when.js';
import { s as slotted } from './slotted.js';
import { c as classNames } from './class-names.js';

const styles = "/**\n * Do not edit directly\n * Generated on Tue, 17 Oct 2023 15:27:52 GMT\n */\n:host {\n  display: block;\n}\n\n.base {\n  display: flex;\n  box-sizing: border-box;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  block-size: 100%;\n  gap: 24px;\n}\n\n.icon-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--vvd-color-neutral-100);\n  block-size: 120px;\n  border-radius: 50%;\n  inline-size: 120px;\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n  font: var(--vvd-typography-base);\n  gap: 8px;\n  text-align: center;\n}\n\nheader {\n  font: var(--vvd-typography-base-bold);\n}\n\n.actions {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n}\n.base.no-actions .actions {\n  display: none;\n}";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
class EmptyState extends FoundationElement {
}
__decorateClass([
  attr
], EmptyState.prototype, "headline", 2);
__decorateClass([
  attr
], EmptyState.prototype, "icon", 2);
__decorateClass([
  observable
], EmptyState.prototype, "slottedActionItems", 2);

const getClasses = (x) => classNames(
  "base",
  ["no-actions", x.slottedActionItems?.length === 0]
);
const EmptyStateTemplate = (context) => {
  const iconTag = context.tagFor(Icon);
  return html`
		<div class="${getClasses}">
			<slot name="graphic">
				${when(
    (x) => x.icon,
    html`<div class="icon-container">
					<${iconTag} class="icon" name="${(x) => x.icon}" size="5"></${iconTag}>
				</div>`
  )}
			</slot>
			<div class="content">
				${when(
    (x) => x.headline,
    html`<header>${(x) => x.headline}</header>`
  )}
				<slot></slot>
			</div>
			<div class="actions">
				<slot name="action-items" ${slotted("slottedActionItems")}></slot>
			</div>
		</div>`;
};

const emptyStateDefinition = EmptyState.compose({
  baseName: "empty-state",
  template: EmptyStateTemplate,
  styles
});
const emptyStateRegistries = [emptyStateDefinition(), ...iconRegistries];
const registerEmptyState = registerFactory(emptyStateRegistries);

export { emptyStateRegistries as a, emptyStateDefinition as e, registerEmptyState as r };
