import { h as html, r as registerFactory } from './index.js';
import { P as Popup, p as popupRegistries } from './definition58.js';
import { M as Menu, a as menuItemRegistries } from './definition27.js';
import { s as slotted } from './slotted.js';
import { c as classNames } from './class-names.js';

const styles = "/**\n * Do not edit directly\n * Generated on Tue, 17 Oct 2023 15:27:52 GMT\n */\n.base {\n  display: flex;\n  box-sizing: border-box;\n  flex-direction: column;\n  gap: 8px;\n  inline-size: max-content;\n  max-block-size: var(--menu-block-size, 408px);\n  max-inline-size: var(--menu-max-inline-size);\n  min-inline-size: var(--menu-min-inline-size);\n  overflow-x: hidden;\n  overflow-y: auto;\n  padding-block: 8px;\n}\n\n::slotted(a) {\n  color: var(--vvd-color-canvas-text);\n  text-decoration: none;\n}\n\n::slotted(a[role=menuitem]:focus) {\n  display: block;\n  border-radius: 6px;\n  box-shadow: inset 0 0 0 3px currentColor;\n  outline: 2px solid currentColor;\n  outline-offset: -2px;\n}\n\n.header {\n  padding-block-start: 8px;\n  padding-inline: 16px;\n}\n.hide-header .header {\n  display: none;\n}\n\n.hide-body .body {\n  display: none;\n}\n\n.action-items {\n  display: flex;\n  justify-content: flex-end;\n  gap: 8px;\n  padding-inline: 8px;\n}\n.hide-actions .action-items {\n  display: none;\n}";

const getClasses = ({
  headerSlottedContent,
  actionItemsSlottedContent,
  items
}) => classNames(
  "base",
  ["hide-header", !headerSlottedContent?.length],
  ["hide-actions", !actionItemsSlottedContent?.length],
  ["hide-body", items && !items.length]
);
const MenuTemplate = (context) => {
  const popupTag = context.tagFor(Popup);
  function handlePopupEvents(x, e, state) {
    e.stopPropagation();
    x.open = state;
  }
  return html`
		<template>
			<${popupTag}
				:placement=${(x) => x.placement}
				:open=${(x) => x.open}
				:anchor=${(x) => x.anchor}
				@vwc-popup:open="${(x, c) => handlePopupEvents(x, c.event, true)}"
				@vwc-popup:close="${(x, c) => handlePopupEvents(x, c.event, false)}"
			>
			<div class="${getClasses}">
				<div class="header">
					<slot name="header" ${slotted("headerSlottedContent")}></slot>
				</div>
				<div
					class="body"
					role="menu"
					@keydown="${(x, c) => x.handleMenuKeyDown(c.event)}"
					@focusout="${(x, c) => x.handleFocusOut(c.event)}"
				>
					<slot ${slotted("items")}></slot>
				</div>
				<footer class="action-items"><slot name="action-items"  ${slotted("actionItemsSlottedContent")}></slot></footer>
			</div>
		</${popupTag}>
	</template>`;
};

const menuDefinition = Menu.compose({
  baseName: "menu",
  template: MenuTemplate,
  styles
});
const menuRegistries = [menuDefinition(), ...popupRegistries, ...menuItemRegistries];
const registerMenu = registerFactory(menuRegistries);

export { menuRegistries as a, menuDefinition as m, registerMenu as r };
