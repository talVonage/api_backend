import { a as attr, F as FoundationElement, h as html, r as registerFactory } from './index.js';
import { c as classNames } from './class-names.js';

const styles = "/**\n * Do not edit directly\n * Generated on Tue, 17 Oct 2023 15:27:52 GMT\n */\n:host {\n  display: inline-block;\n}\n\n.base {\n  position: relative;\n  display: flex;\n  box-sizing: border-box;\n  align-items: center;\n  background-color: var(--_appearance-color-fill);\n  inline-size: inherit;\n  vertical-align: middle;\n}\n.base {\n  /* @cssprop [--vvd-action-group-accent-backdrop=var(--vvd-color-canvas)] */\n  --_connotation-color-backdrop: var(--vvd-action-group-accent-backdrop, var(--vvd-color-canvas));\n  /* @cssprop [--vvd-action-group-accent-primary=var(--vvd-color-canvas-text)] */\n  --_connotation-color-primary: var(--vvd-action-group-accent-primary, var(--vvd-color-canvas-text));\n  /* @cssprop [--vvd-action-group-accent-intermediate=var(--vvd-color-neutral-500)] */\n  --_connotation-color-intermediate: var(--vvd-action-group-accent-intermediate, var(--vvd-color-neutral-500));\n  /* @cssprop [--vvd-action-group-accent-faint=var(--vvd-color-neutral-50)] */\n  --_connotation-color-faint: var(--vvd-action-group-accent-faint, var(--vvd-color-neutral-50));\n}\n.base {\n  --_appearance-color-text: var(--vvd-color-canvas-text);\n  --_appearance-color-fill: var(--_connotation-color-backdrop);\n  --_appearance-color-outline: var(--_connotation-color-intermediate);\n}\n.base.appearance-ghost {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: transparent;\n}\n.base::before {\n  position: absolute;\n  z-index: 1;\n  border-radius: inherit;\n  box-shadow: inset 0 0 0 1px var(--_appearance-color-outline);\n  content: \"\";\n  inset: 0;\n  pointer-events: none;\n}\n.base:not(.tight) {\n  padding: 4px;\n  column-gap: 4px;\n}\n\n/* Shape */\n.base:not(.shape-pill) {\n  border-radius: 6px;\n}\n\n.base.shape-pill {\n  border-radius: 24px;\n}\n\n/* Separator */\n::slotted([role=separator]) {\n  align-self: stretch;\n  margin-block: 4px;\n}";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
class ActionGroup extends FoundationElement {
  constructor() {
    super(...arguments);
    this.tight = false;
    this.role = null;
    this.ariaLabel = null;
  }
}
__decorateClass([
  attr
], ActionGroup.prototype, "shape", 2);
__decorateClass([
  attr
], ActionGroup.prototype, "appearance", 2);
__decorateClass([
  attr({
    mode: "boolean"
  })
], ActionGroup.prototype, "tight", 2);
__decorateClass([
  attr()
], ActionGroup.prototype, "role", 2);
__decorateClass([
  attr({ attribute: "aria-label" })
], ActionGroup.prototype, "ariaLabel", 2);

const getClasses = ({
  appearance,
  shape,
  tight
}) => classNames(
  "base",
  [`appearance-${appearance}`, Boolean(appearance)],
  [`shape-${shape}`, Boolean(shape)],
  ["tight", tight]
);
const ActionGroupTemplate = () => html`
<div class="${getClasses}" 
	role="${(x) => x.role ? x.role : "group"}" 
	aria-label="${(x) => x.ariaLabel}">
  <slot></slot>
</div>`;

const actionGroupDefinition = ActionGroup.compose({
  baseName: "action-group",
  template: ActionGroupTemplate,
  styles
});
const actionGroupRegistries = [actionGroupDefinition()];
const registerActionGroup = registerFactory(actionGroupRegistries);

export { actionGroupDefinition as a, actionGroupRegistries as b, registerActionGroup as r };
