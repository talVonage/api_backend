import { a as attr, F as FoundationElement, n as nullableNumberConverter, h as html, r as registerFactory } from './index.js';
import { C as Connotation, a as buttonRegistries } from './definition10.js';
import { E as Elevation, e as elevationRegistries } from './definition57.js';
import { a as iconRegistries } from './definition25.js';
import { A as AffixIcon, a as affixIconTemplateFactory } from './affix.js';
import { a as applyMixins } from './apply-mixins.js';
import './index2.js';
import { B as Button$1 } from './button.js';
import { w as when } from './when.js';
import { c as classNames } from './class-names.js';

const styles = "/**\n * Do not edit directly\n * Generated on Tue, 17 Oct 2023 15:27:52 GMT\n */\n.control {\n  position: fixed;\n  z-index: 10;\n  border-radius: 6px;\n  inline-size: max-content;\n  inset-block-end: 0;\n  inset-inline-end: 0;\n  inset-inline-start: 0;\n  margin-block: 16px;\n  margin-inline: auto;\n  max-inline-size: var(--alert-max-inline-size, fit-content);\n  min-inline-size: var(--alert-min-inline-size, 420px);\n  transition: opacity 150ms cubic-bezier(0, 0, 0.2, 1) 0ms, transform 150ms cubic-bezier(0, 0, 0.2, 1) 0ms;\n}\n.control.placement-top, .control.placement-top-start, .control.placement-top-end {\n  inset-block-end: auto;\n  inset-block-start: 0;\n}\n.control.placement-top-start, .control.placement-bottom-start {\n  right: auto;\n  inset-inline-end: auto;\n  margin-inline: 16px;\n}\n.control.placement-top-end, .control.placement-bottom-end {\n  inset-inline-start: auto;\n  margin-inline: 16px;\n}\n.control:not(.open) {\n  opacity: 0;\n  transform: scale(0.8);\n}\n.control.open {\n  opacity: 1;\n  transform: scale(1);\n}\n\n.base {\n  display: flex;\n  align-items: center;\n  padding: 16px;\n  background-color: var(--vvd-color-neutral-50);\n  border-radius: 6px;\n  color: var(--vvd-color-canvas-text);\n  column-gap: 16px;\n}\n.base.connotation-success {\n  /* @cssprop [--vvd-alert-success-primary=var(--vvd-color-success-500)] */\n  --_connotation-color-primary: var(--vvd-alert-success-primary, var(--vvd-color-success-500));\n  /* @cssprop [--vvd-alert-success-primary-text=var(--vvd-color-canvas)] */\n  --_connotation-color-primary-text: var(--vvd-alert-success-primary-text, var(--vvd-color-canvas));\n}\n.base.connotation-information {\n  /* @cssprop [--vvd-alert-information-primary=var(--vvd-color-information-500)] */\n  --_connotation-color-primary: var(--vvd-alert-information-primary, var(--vvd-color-information-500));\n  /* @cssprop [--vvd-alert-information-primary-text=var(--vvd-color-canvas)] */\n  --_connotation-color-primary-text: var(--vvd-alert-information-primary-text, var(--vvd-color-canvas));\n}\n.base.connotation-alert {\n  /* @cssprop [--vvd-alert-alert-primary=var(--vvd-color-alert-500)] */\n  --_connotation-color-primary: var(--vvd-alert-alert-primary, var(--vvd-color-alert-500));\n  /* @cssprop [--vvd-alert-alert-primary-text=var(--vvd-color-canvas)] */\n  --_connotation-color-primary-text: var(--vvd-alert-alert-primary-text, var(--vvd-color-canvas));\n}\n.base.connotation-warning {\n  /* @cssprop [--vvd-alert-warning-primary=var(--vvd-color-warning-300)] */\n  --_connotation-color-primary: var(--vvd-alert-warning-primary, var(--vvd-color-warning-300));\n  /* @cssprop [--vvd-alert-warning-primary-text=var(--vvd-color-canvas-text)] */\n  --_connotation-color-primary-text: var(--vvd-alert-warning-primary-text, var(--vvd-color-canvas-text));\n}\n.base:not(.connotation-success, .connotation-information, .connotation-alert, .connotation-warning) {\n  /* @cssprop [--vvd-alert-accent-primary=var(--vvd-color-canvas-text)] */\n  --_connotation-color-primary: var(--vvd-alert-accent-primary, var(--vvd-color-canvas-text));\n  /* @cssprop [--vvd-alert-accent-primary-text=var(--vvd-color-canvas)] */\n  --_connotation-color-primary-text: var(--vvd-alert-accent-primary-text, var(--vvd-color-canvas));\n}\n.base {\n  --_appearance-color-text: var(--_connotation-color-primary-text);\n  --_appearance-color-fill: var(--_connotation-color-primary);\n  --_appearance-color-outline: transparent;\n}\n.base .alert-text {\n  margin-inline-end: auto;\n}\n.base .alert-text .headline {\n  font: var(--vvd-typography-base-bold);\n  margin-block-end: 4px;\n}\n.base .alert-text .main-text {\n  font: var(--vvd-typography-base);\n}\n.base .icon {\n  flex-shrink: 0;\n  color: var(--_appearance-color-fill);\n  font-size: 24px;\n  line-height: 1;\n}\n.base .dismiss-button {\n  border-left: 1px solid var(--vvd-color-neutral-200);\n  padding-inline-start: 8px;\n}";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
const connotationIconMap = /* @__PURE__ */ new Map([
  [Connotation.Accent, "megaphone-line"],
  [Connotation.Information, "info-line"],
  [Connotation.Success, "check-circle-line"],
  [Connotation.Warning, "warning-line"],
  [Connotation.Alert, "error-line"]
]);
class Alert extends FoundationElement {
  constructor() {
    super(...arguments);
    this.removable = false;
    this.placement = "bottom";
    this.timeoutms = 0;
    this.open = false;
    this.#closeOnEscape = (e) => {
      if (this.removable && e.key === "Escape")
        this.open = false;
    };
  }
  // timeout to close the alert
  #timeoutID;
  openChanged(oldValue, newValue) {
    if (oldValue === void 0)
      return;
    this.$emit(newValue ? "open" : "close");
    this.#setupTimeout();
  }
  connectedCallback() {
    this.#setupTimeout();
    this.addEventListener("keydown", this.#closeOnEscape);
    super.connectedCallback();
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    if (this.#timeoutID)
      clearTimeout(this.#timeoutID);
    this.removeEventListener("keydown", this.#closeOnEscape);
  }
  get conditionedIcon() {
    return this.icon || connotationIconMap.get(this.connotation);
  }
  #setupTimeout() {
    if (this.#timeoutID)
      clearTimeout(this.#timeoutID);
    if (this.open && this.timeoutms > 0) {
      this.#timeoutID = setTimeout(() => this.open = false, this.timeoutms);
    }
  }
  #closeOnEscape;
}
__decorateClass([
  attr({ mode: "boolean" })
], Alert.prototype, "removable", 2);
__decorateClass([
  attr({ mode: "fromView" })
], Alert.prototype, "placement", 2);
__decorateClass([
  attr
], Alert.prototype, "headline", 2);
__decorateClass([
  attr
], Alert.prototype, "text", 2);
__decorateClass([
  attr
], Alert.prototype, "icon", 2);
__decorateClass([
  attr({
    mode: "fromView",
    converter: nullableNumberConverter
  })
], Alert.prototype, "timeoutms", 2);
__decorateClass([
  attr
], Alert.prototype, "connotation", 2);
__decorateClass([
  attr({ mode: "boolean" })
], Alert.prototype, "open", 2);
applyMixins(Alert, AffixIcon);

const getClasses = ({ connotation }) => classNames(
  "base",
  [`connotation-${connotation}`, Boolean(connotation)]
);
const getControlClasses = ({ open, placement }) => classNames(
  "control",
  ["open", open],
  [`placement-${placement}`, Boolean(placement)]
);
function renderIcon(context) {
  const affixIconTemplate = affixIconTemplateFactory(context);
  return html`${(x) => affixIconTemplate(x.conditionedIcon)}`;
}
function renderDismissButton(buttonTag) {
  return html`
		<${buttonTag}
			size="condensed"
			class="dismiss-button"
			icon="close-line"
			@click="${(x) => x.open = false}">
		</${buttonTag}>`;
}
const AlertTemplate = (context) => {
  const elevationTag = context.tagFor(Elevation);
  const buttonTag = context.tagFor(Button$1);
  return html`
	<${elevationTag} class="elevation" dp='8' exportparts="vvd-theme-alternate">
		<div class="${getControlClasses}" role="alert" aria-live="assertive">
			<div part="vvd-theme-alternate" class="${getClasses}">
				${when((x) => x.icon || x.connotation, renderIcon(context))}
				<div class="alert-text">
					${when(
    (x) => x.headline,
    html`<header class="headline">${(x) => x.headline}</header>`
  )}
					${when(
    (x) => x.text,
    html`<div class="main-text">${(x) => x.text}</div>`
  )}
					<slot name="main">
					</slot>
				</div>
				<slot class="action-items" name="action-items"></slot>
				${when((x) => x.removable, renderDismissButton(buttonTag))}
			</div>
		</div>
	</${elevationTag}>
	`;
};

const alertDefinition = Alert.compose({
  baseName: "alert",
  template: AlertTemplate,
  styles
});
const alertRegistries = [alertDefinition(), ...iconRegistries, ...buttonRegistries, ...elevationRegistries];
const registerAlert = registerFactory(alertRegistries);

export { alertDefinition as a, alertRegistries as b, registerAlert as r };
