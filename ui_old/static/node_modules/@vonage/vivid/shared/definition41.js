import { a as attr, F as FoundationElement, h as html, r as registerFactory } from './index.js';
import { w as when } from './when.js';
import { c as classNames } from './class-names.js';

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
class SideDrawer extends FoundationElement {
  constructor() {
    super(...arguments);
    this.alternate = false;
    this.modal = false;
    this.open = false;
    this.trailing = false;
  }
  attributeChangedCallback(name, oldValue, newValue) {
    super.attributeChangedCallback(name, oldValue, newValue);
    switch (name) {
      case "open": {
        this.open ? this.#open() : this.#close();
      }
    }
  }
  #close() {
    this.$emit("close", void 0, { bubbles: false });
  }
  #open() {
    this.$emit("open", void 0, { bubbles: false });
  }
}
__decorateClass([
  attr({
    mode: "boolean"
  })
], SideDrawer.prototype, "alternate", 2);
__decorateClass([
  attr({
    mode: "boolean"
  })
], SideDrawer.prototype, "modal", 2);
__decorateClass([
  attr({
    mode: "boolean"
  })
], SideDrawer.prototype, "open", 2);
__decorateClass([
  attr({
    mode: "boolean"
  })
], SideDrawer.prototype, "trailing", 2);

const styles = "/**\n * Do not edit directly\n * Generated on Tue, 17 Oct 2023 15:27:52 GMT\n */\n.control {\n  position: fixed;\n  z-index: 1;\n  background-color: var(--vvd-color-canvas);\n  color: var(--vvd-color-canvas-text);\n  inline-size: 280px;\n  inset-block: 0;\n  overflow-y: auto;\n}\n.control[part~=vvd-theme-alternate] {\n  background-color: var(--vvd-color-canvas);\n  color: var(--vvd-color-canvas-text);\n  color-scheme: var(--vvd-color-scheme);\n}\n.control.trailing {\n  inset-inline-end: 0;\n}\n.control:not(.open).trailing {\n  transform: translateX(100%);\n}\n.control:not(.open):not(.trailing) {\n  transform: translateX(-100%);\n}\n.control.open:not(.modal).trailing + .side-drawer-app-content {\n  margin-inline-end: var(--side-drawer-app-content-offset, 280px);\n}\n.control.open:not(.modal):not(.trailing) + .side-drawer-app-content {\n  margin-inline-start: var(--side-drawer-app-content-offset, 280px);\n}\n@media (prefers-reduced-motion: no-preference) {\n  .control {\n    transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n}\n\n.scrim {\n  background-color: var(--vvd-color-canvas-text, currentColor);\n  opacity: 0.5;\n  position: fixed;\n  inset: 0;\n}\n.scrim:not(.open) {\n  display: none;\n}";

const getClasses = ({
  modal,
  open,
  trailing
}) => classNames(
  "control",
  ["modal", modal],
  ["open", open],
  ["trailing", trailing]
);
const getScrimClasses = ({
  open
}) => classNames(
  "scrim",
  ["open", open]
);
const sideDrawerTemplate = () => html`
	<aside class="${getClasses}" part="base ${(x) => x.alternate ? "vvd-theme-alternate" : ""}"
	 @keydown="${(x, c) => handleKeydown(x, c.event)}">
    <slot></slot>
	</aside>

	<div class="side-drawer-app-content" ?inert="${(x) => x.open && x.modal}">
		<slot name="app-content"></slot>
	</div>

	${when(
  (x) => x.modal,
  html`<div class="${getScrimClasses}" @click="${(x) => x.open = false}"></div>`
)}
`;
const handleKeydown = (x, { key }) => {
  if (key === "Escape") {
    x.open = false;
  } else {
    return true;
  }
};

const sideDrawerDefinition = SideDrawer.compose({
  baseName: "side-drawer",
  template: sideDrawerTemplate,
  styles
});
const sideDrawerRegistries = [sideDrawerDefinition()];
const registerSideDrawer = registerFactory(sideDrawerRegistries);

export { sideDrawerRegistries as a, registerSideDrawer as r, sideDrawerDefinition as s };
