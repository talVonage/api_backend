import { a as attr, F as FoundationElement, h as html, r as registerFactory } from './index.js';
import { a as iconRegistries } from './definition25.js';
import { f as focusRegistries } from './definition56.js';
import { A as AffixIcon, a as affixIconTemplateFactory } from './affix.js';
import { a as applyMixins } from './apply-mixins.js';
import { f as focusTemplateFactory } from './focus2.js';
import { r as ref } from './ref.js';
import { c as classNames } from './class-names.js';

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
class SplitButton extends FoundationElement {
  constructor() {
    super(...arguments);
    this.splitIndicator = "chevron-down-line";
    this.disabled = false;
    this.ariaLabel = null;
    this.ariaExpanded = null;
  }
  get action() {
    return this._action;
  }
  get indicator() {
    return this._indicator;
  }
}
__decorateClass([
  attr
], SplitButton.prototype, "connotation", 2);
__decorateClass([
  attr
], SplitButton.prototype, "shape", 2);
__decorateClass([
  attr
], SplitButton.prototype, "appearance", 2);
__decorateClass([
  attr
], SplitButton.prototype, "size", 2);
__decorateClass([
  attr
], SplitButton.prototype, "label", 2);
__decorateClass([
  attr
], SplitButton.prototype, "icon", 2);
__decorateClass([
  attr({ attribute: "split-indicator", mode: "fromView" })
], SplitButton.prototype, "splitIndicator", 2);
__decorateClass([
  attr({ attribute: "disabled", mode: "boolean" })
], SplitButton.prototype, "disabled", 2);
__decorateClass([
  attr({ attribute: "aria-label" })
], SplitButton.prototype, "ariaLabel", 2);
__decorateClass([
  attr({ attribute: "aria-expanded" })
], SplitButton.prototype, "ariaExpanded", 2);
applyMixins(SplitButton, AffixIcon);

const styles = "/**\n * Do not edit directly\n * Generated on Tue, 17 Oct 2023 15:27:52 GMT\n */\n:host {\n  display: inline-block;\n}\n\n.base {\n  display: inline-flex;\n  justify-content: flex-start;\n  inline-size: inherit;\n}\n\n.control,\n.indicator {\n  position: relative;\n  display: inline-flex;\n  box-sizing: border-box;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n  border: 1px solid var(--_appearance-color-outline);\n  margin: 0;\n  background-color: var(--_appearance-color-fill);\n  block-size: var(--_split-button-block-size);\n  color: var(--_appearance-color-text);\n  vertical-align: middle;\n}\n.control.connotation-cta,\n.indicator.connotation-cta {\n  /* @cssprop [--vvd-split-button-cta-primary=var(--vvd-color-cta-500)] */\n  --_connotation-color-primary: var(--vvd-split-button-cta-primary, var(--vvd-color-cta-500));\n  /* @cssprop [--vvd-split-button-cta-primary-text=var(--vvd-color-canvas)] */\n  --_connotation-color-primary-text: var(--vvd-split-button-cta-primary-text, var(--vvd-color-canvas));\n  /* @cssprop [--vvd-split-button-cta-primary-increment=var(--vvd-color-cta-600)] */\n  --_connotation-color-primary-increment: var(--vvd-split-button-cta-primary-increment, var(--vvd-color-cta-600));\n  /* @cssprop [--vvd-split-button-cta-contrast=var(--vvd-color-cta-800)] */\n  --_connotation-color-contrast: var(--vvd-split-button-cta-contrast, var(--vvd-color-cta-800));\n  /* @cssprop [--vvd-split-button-cta-fierce=var(--vvd-color-cta-700)] */\n  --_connotation-color-fierce: var(--vvd-split-button-cta-fierce, var(--vvd-color-cta-700));\n  /* @cssprop [--vvd-split-button-cta-firm=var(--vvd-color-cta-600)] */\n  --_connotation-color-firm: var(--vvd-split-button-cta-firm, var(--vvd-color-cta-600));\n  /* @cssprop [--vvd-split-button-cta-soft=var(--vvd-color-cta-100)] */\n  --_connotation-color-soft: var(--vvd-split-button-cta-soft, var(--vvd-color-cta-100));\n  /* @cssprop [--vvd-split-button-cta-faint=var(--vvd-color-cta-50)] */\n  --_connotation-color-faint: var(--vvd-split-button-cta-faint, var(--vvd-color-cta-50));\n}\n.control:not(.connotation-cta),\n.indicator:not(.connotation-cta) {\n  /* @cssprop [--vvd-split-button-accent-primary=var(--vvd-color-canvas-text)] */\n  --_connotation-color-primary: var(--vvd-split-button-accent-primary, var(--vvd-color-canvas-text));\n  /* @cssprop [--vvd-split-button-accent-primary-text=var(--vvd-color-canvas)] */\n  --_connotation-color-primary-text: var(--vvd-split-button-accent-primary-text, var(--vvd-color-canvas));\n  /* @cssprop [--vvd-split-button-accent-primary-increment=var(--vvd-color-neutral-800)] */\n  --_connotation-color-primary-increment: var(--vvd-split-button-accent-primary-increment, var(--vvd-color-neutral-800));\n  /* @cssprop [--vvd-split-button-accent-contrast=var(--vvd-color-neutral-800)] */\n  --_connotation-color-contrast: var(--vvd-split-button-accent-contrast, var(--vvd-color-neutral-800));\n  /* @cssprop [--vvd-split-button-accent-fierce=var(--vvd-color-neutral-700)] */\n  --_connotation-color-fierce: var(--vvd-split-button-accent-fierce, var(--vvd-color-neutral-700));\n  /* @cssprop [--vvd-split-button-accent-firm=var(--vvd-color-canvas-text)] */\n  --_connotation-color-firm: var(--vvd-split-button-accent-firm, var(--vvd-color-canvas-text));\n  /* @cssprop [--vvd-split-button-accent-soft=var(--vvd-color-neutral-100)] */\n  --_connotation-color-soft: var(--vvd-split-button-accent-soft, var(--vvd-color-neutral-100));\n  /* @cssprop [--vvd-split-button-accent-faint=var(--vvd-color-neutral-50)] */\n  --_connotation-color-faint: var(--vvd-split-button-accent-faint, var(--vvd-color-neutral-50));\n}\n.control.appearance-filled,\n.indicator.appearance-filled {\n  --_appearance-color-text: var(--_connotation-color-primary-text);\n  --_appearance-color-fill: var(--_connotation-color-primary);\n  --_appearance-color-outline: transparent;\n}\n.control.appearance-outlined,\n.indicator.appearance-outlined {\n  --_appearance-color-text: var(--_connotation-color-firm);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: var(--_connotation-color-firm);\n}\n.control,\n.indicator {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: transparent;\n}\n.control:where(:hover, .hover):where(:not(:disabled, .disabled, .readonly)).appearance-filled,\n.indicator:where(:hover, .hover):where(:not(:disabled, .disabled, .readonly)).appearance-filled {\n  --_appearance-color-text: var(--_connotation-color-primary-text);\n  --_appearance-color-fill: var(--_connotation-color-primary-increment);\n  --_appearance-color-outline: transparent;\n}\n.control:where(:hover, .hover):where(:not(:disabled, .disabled, .readonly)).appearance-outlined,\n.indicator:where(:hover, .hover):where(:not(:disabled, .disabled, .readonly)).appearance-outlined {\n  --_appearance-color-text: var(--_connotation-color-firm);\n  --_appearance-color-fill: var(--_connotation-color-faint);\n  --_appearance-color-outline: var(--_connotation-color-firm);\n}\n.control:where(:hover, .hover):where(:not(:disabled, .disabled, .readonly)),\n.indicator:where(:hover, .hover):where(:not(:disabled, .disabled, .readonly)) {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: var(--_connotation-color-faint);\n  --_appearance-color-outline: transparent;\n}\n.control:where(:disabled, .disabled).appearance-filled,\n.indicator:where(:disabled, .disabled).appearance-filled {\n  --_appearance-color-text: var(--vvd-color-neutral-300);\n  --_appearance-color-fill: var(--vvd-color-neutral-100);\n  --_appearance-color-outline: transparent;\n}\n.control:where(:disabled, .disabled).appearance-outlined,\n.indicator:where(:disabled, .disabled).appearance-outlined {\n  --_appearance-color-text: var(--vvd-color-neutral-300);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: var(--vvd-color-neutral-300);\n}\n.control:where(:disabled, .disabled),\n.indicator:where(:disabled, .disabled) {\n  --_appearance-color-text: var(--vvd-color-neutral-300);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: transparent;\n}\n.control:where(:active, .active):where(:not(:disabled, .disabled)).appearance-filled,\n.indicator:where(:active, .active):where(:not(:disabled, .disabled)).appearance-filled {\n  --_appearance-color-text: var(--_connotation-color-primary-text);\n  --_appearance-color-fill: var(--_connotation-color-fierce);\n  --_appearance-color-outline: transparent;\n}\n.control:where(:active, .active):where(:not(:disabled, .disabled)).appearance-outlined,\n.indicator:where(:active, .active):where(:not(:disabled, .disabled)).appearance-outlined {\n  --_appearance-color-text: var(--_connotation-color-firm);\n  --_appearance-color-fill: var(--_connotation-color-soft);\n  --_appearance-color-outline: var(--_connotation-color-firm);\n}\n.control:where(:active, .active):where(:not(:disabled, .disabled)),\n.indicator:where(:active, .active):where(:not(:disabled, .disabled)) {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: var(--_connotation-color-soft);\n  --_appearance-color-outline: transparent;\n}\n@supports (user-select: none) {\n  .control,\n  .indicator {\n    user-select: none;\n  }\n}\n\n.control {\n  border-inline-end: 0;\n  gap: var(--_split-button-icon-gap);\n  isolation: isolate;\n  /* Disabled */\n  /* shape */\n  /* size */\n}\n.control:focus-visible {\n  outline: none;\n}\n.control:not(:disabled) {\n  cursor: pointer;\n}\n.control:disabled {\n  cursor: not-allowed;\n}\n.control.icon-only {\n  contain: size;\n  place-content: center;\n}\n@supports (aspect-ratio: 1) {\n  .control.icon-only {\n    aspect-ratio: 1;\n  }\n}\n@supports not (aspect-ratio: 1) {\n  .control.icon-only {\n    inline-size: var(--_split-button-block-size);\n  }\n}\n.control:not(.icon-only) {\n  flex-grow: 1;\n  inline-size: inherit;\n}\n.control:not(.shape-pill) {\n  border-radius: 6px 0 0 6px;\n}\n.control.shape-pill {\n  border-radius: 24px 0 0 24px;\n}\n.control.size-super-condensed {\n  --_split-button-block-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 16));\n  font: var(--vvd-typography-base-condensed-bold);\n}\n.control.size-super-condensed:not(.icon-only) {\n  --_split-button-icon-gap: 4px;\n  padding-inline: 8px;\n}\n.control.size-condensed {\n  --_split-button-block-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 8));\n  font: var(--vvd-typography-base-condensed-bold);\n}\n.control.size-condensed:not(.icon-only) {\n  --_split-button-icon-gap: 8px;\n  padding-inline: 12px;\n}\n.control.size-expanded {\n  --_split-button-block-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) + 8));\n  font: var(--vvd-typography-base-extended-bold);\n}\n.control.size-expanded:not(.icon-only) {\n  --_split-button-icon-gap: 10px;\n  padding-inline: 20px;\n}\n.control:not(.size-condensed, .size-expanded, .size-super-condensed) {\n  --_split-button-block-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2)));\n  font: var(--vvd-typography-base-bold);\n}\n.control:not(.size-condensed, .size-expanded, .size-super-condensed):not(.icon-only) {\n  --_split-button-icon-gap: 8px;\n  padding-inline: 16px;\n}\n.control .text {\n  overflow: hidden;\n  max-inline-size: 100%;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.indicator {\n  border-inline-start: 0;\n  inline-size: var(--_split-button-inline-size);\n  /* Disabled */\n  /* Shape */\n  /* size */\n}\n.indicator:focus-visible {\n  outline: none;\n}\n.indicator:not(:disabled) {\n  cursor: pointer;\n}\n.indicator:disabled {\n  cursor: not-allowed;\n}\n.indicator:not(.shape-pill) {\n  border-radius: 0 6px 6px 0;\n}\n.indicator.shape-pill {\n  border-radius: 0 24px 24px 0;\n}\n.indicator::before {\n  position: absolute;\n  background-color: var(--_appearance-color-text);\n  content: \"\";\n  inline-size: 1px;\n  inset-inline-start: 0;\n  opacity: 0.35;\n}\n.indicator:not(.appearance-filled, .appearance-outlined)::before {\n  block-size: 50%;\n}\n.indicator:is(.appearance-filled, .appearance-outlined)::before {\n  block-size: 100%;\n}\n.indicator.size-super-condensed {\n  --_split-button-block-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 16));\n  --_split-button-inline-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 16));\n  font: var(--vvd-typography-base-condensed);\n}\n.indicator.size-condensed {\n  --_split-button-block-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 8));\n  --_split-button-inline-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 12));\n  font: var(--vvd-typography-base-condensed);\n}\n.indicator.size-expanded {\n  --_split-button-block-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) + 8));\n  --_split-button-inline-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2)));\n  font: var(--vvd-typography-base-extended);\n}\n.indicator:not(.size-condensed, .size-expanded, .size-super-condensed) {\n  --_split-button-block-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2)));\n  --_split-button-inline-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 8));\n  font: var(--vvd-typography-base-extended);\n}\n\n/* Icon */\n.icon {\n  line-height: 1;\n}\n.icon-trailing .icon {\n  order: 1;\n}\n.control > .icon {\n  font-size: calc(var(--_split-button-block-size) / 2);\n}\n\n/* Focus */\n:not(:focus-visible) > .focus-indicator {\n  display: none;\n}\n.control:not(.appearance-filled) .focus-indicator, .indicator:not(.appearance-filled) .focus-indicator {\n  --focus-stroke-gap-color: transparent;\n}\n.control.appearance-outlined .focus-indicator, .indicator.appearance-outlined .focus-indicator {\n  --focus-inset: -1px;\n}";

const getClasses = ({
  connotation,
  appearance,
  shape,
  disabled,
  size
}) => classNames(
  [`connotation-${connotation}`, Boolean(connotation)],
  ["disabled", disabled],
  [`shape-${shape}`, Boolean(shape)],
  [`appearance-${appearance}`, Boolean(appearance)],
  [`size-${size}`, Boolean(size)]
);
function actionButton(context) {
  const affixIconTemplate = affixIconTemplateFactory(context);
  const focusTemplate = focusTemplateFactory(context);
  return html`
	<button
		${ref("_action")}
		class="control ${getClasses} ${(x) => !x.label && !!x.icon ? "icon-only" : ""}"
		aria-label="${(x) => x.ariaLabel}"
		?disabled="${(x) => x.disabled}"
		aria-disabled="${(x) => x.disabled}">
			${() => focusTemplate}
			${(x) => affixIconTemplate(x.icon)}
		<span class="text">${(x) => x.label}</span>
	</button>
	`;
}
function indicatorButton(context) {
  const affixIconTemplate = affixIconTemplateFactory(context);
  const focusTemplate = focusTemplateFactory(context);
  return html`
	<button
		${ref("_indicator")}
		class="indicator ${getClasses}"
		?disabled="${(x) => x.disabled}"
		aria-disabled="${(x) => x.disabled}"
		aria-label="Open for more actions"
		aria-haspopup="true"
		aria-expanded="${(x) => x.ariaExpanded}">
			${() => focusTemplate}
			${(x) => affixIconTemplate(x.splitIndicator)}
	</button>
	`;
}
const SplitButtonTemplate = (context) => {
  return html`
		<div class="base" role="group">
			${actionButton(context)}
			${indicatorButton(context)}
			<slot></slot>
		</div>`;
};

const splitButtonDefinition = SplitButton.compose({
  baseName: "split-button",
  template: SplitButtonTemplate,
  styles,
  shadowOptions: {
    delegatesFocus: true
  }
});
const splitButtonRegistries = [splitButtonDefinition(), ...iconRegistries, ...focusRegistries];
const registerSplitButton = registerFactory(splitButtonRegistries);

export { splitButtonRegistries as a, registerSplitButton as r, splitButtonDefinition as s };
