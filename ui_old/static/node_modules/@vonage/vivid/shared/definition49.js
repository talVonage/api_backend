import { a as attr, F as FoundationElement, h as html, r as registerFactory } from './index.js';
import { a as iconRegistries } from './definition25.js';
import { f as focusRegistries } from './definition56.js';
import { A as AffixIcon, a as affixIconTemplateFactory, I as IconWrapper } from './affix.js';
import { a as applyMixins } from './apply-mixins.js';
import { f as focusTemplateFactory } from './focus2.js';
import { I as Icon } from './icon.js';
import { w as when } from './when.js';
import { c as classNames } from './class-names.js';

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
class Tag extends FoundationElement {
  constructor() {
    super(...arguments);
    this.removable = false;
    this.disabled = false;
    this.selectable = false;
    this.selected = false;
    this.#select = () => {
      if (!this.selectable || this.disabled) {
        return;
      }
      this.selected = !this.selected;
      this.$emit("selected-change");
    };
  }
  remove() {
    if (!this.removable || this.selectable) {
      return;
    }
    this.$emit("removed");
    this.parentElement && this.parentElement.removeChild(this);
  }
  #select;
  handleKeydown(e) {
    if (e.key === "Enter") {
      this.#select();
    }
    if (e.key === "Delete" || e.key === "Backspace") {
      this.remove();
    }
    return true;
  }
  handleClick() {
    this.#select();
  }
}
__decorateClass([
  attr
], Tag.prototype, "connotation", 2);
__decorateClass([
  attr
], Tag.prototype, "shape", 2);
__decorateClass([
  attr
], Tag.prototype, "appearance", 2);
__decorateClass([
  attr
], Tag.prototype, "label", 2);
__decorateClass([
  attr({ mode: "boolean" })
], Tag.prototype, "removable", 2);
__decorateClass([
  attr({ mode: "boolean" })
], Tag.prototype, "disabled", 2);
__decorateClass([
  attr({ mode: "boolean" })
], Tag.prototype, "selectable", 2);
__decorateClass([
  attr({ mode: "boolean" })
], Tag.prototype, "selected", 2);
applyMixins(Tag, AffixIcon);

const styles = "/**\n * Do not edit directly\n * Generated on Tue, 17 Oct 2023 15:27:52 GMT\n */\n.base {\n  --tag-block-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) - 16));\n  position: relative;\n  display: inline-flex;\n  box-sizing: border-box;\n  align-items: center;\n  background-color: var(--_appearance-color-fill);\n  block-size: var(--tag-block-size);\n  box-shadow: inset 0 0 0 1px var(--_appearance-color-outline);\n  color: var(--_appearance-color-text);\n  column-gap: 8px;\n  font: var(--vvd-typography-base-bold);\n  max-inline-size: 100%;\n  padding-inline: 8px;\n  vertical-align: middle;\n  /* Shape */\n}\n.base.connotation-cta {\n  /* @cssprop [--vvd-tag-cta-contrast=var(--vvd-color-cta-800)] */\n  --_connotation-color-contrast: var(--vvd-tag-cta-contrast, var(--vvd-color-cta-800));\n  /* @cssprop [--vvd-tag-cta-soft=var(--vvd-color-cta-100)] */\n  --_connotation-color-soft: var(--vvd-tag-cta-soft, var(--vvd-color-cta-100));\n  /* @cssprop [--vvd-tag-cta-pale=var(--vvd-color-cta-300)] */\n  --_connotation-color-pale: var(--vvd-tag-cta-pale, var(--vvd-color-cta-300));\n  /* @cssprop [--vvd-tag-cta-fierce=var(--vvd-color-cta-700)] */\n  --_connotation-color-fierce: var(--vvd-tag-cta-fierce, var(--vvd-color-cta-700));\n  /* @cssprop [--vvd-tag-cta-firm=var(--vvd-color-cta-600)] */\n  --_connotation-color-firm: var(--vvd-tag-cta-firm, var(--vvd-color-cta-600));\n  /* @cssprop [--vvd-tag-cta-faint=var(--vvd-color-cta-50)] */\n  --_connotation-color-faint: var(--vvd-tag-cta-faint, var(--vvd-color-cta-50));\n  /* @cssprop [--vvd-tag-cta-dim=var(--vvd-color-cta-200)] */\n  --_connotation-color-dim: var(--vvd-tag-cta-dim, var(--vvd-color-cta-200));\n}\n.base:not(.connotation-cta) {\n  /* @cssprop [--vvd-tag-accent-contrast=var(--vvd-color-neutral-800)] */\n  --_connotation-color-contrast: var(--vvd-tag-accent-contrast, var(--vvd-color-neutral-800));\n  /* @cssprop [--vvd-tag-accent-soft=var(--vvd-color-neutral-100)] */\n  --_connotation-color-soft: var(--vvd-tag-accent-soft, var(--vvd-color-neutral-100));\n  /* @cssprop [--vvd-tag-accent-pale=var(--vvd-color-neutral-300)] */\n  --_connotation-color-pale: var(--vvd-tag-accent-pale, var(--vvd-color-neutral-300));\n  /* @cssprop [--vvd-tag-accent-fierce=var(--vvd-color-neutral-700)] */\n  --_connotation-color-fierce: var(--vvd-tag-accent-fierce, var(--vvd-color-neutral-700));\n  /* @cssprop [--vvd-tag-accent-firm=var(--vvd-color-canvas-text)] */\n  --_connotation-color-firm: var(--vvd-tag-accent-firm, var(--vvd-color-canvas-text));\n  /* @cssprop [--vvd-tag-accent-faint=var(--vvd-color-neutral-50)] */\n  --_connotation-color-faint: var(--vvd-tag-accent-faint, var(--vvd-color-neutral-50));\n  /* @cssprop [--vvd-tag-accent-dim=var(--vvd-color-neutral-200)] */\n  --_connotation-color-dim: var(--vvd-tag-accent-dim, var(--vvd-color-neutral-200));\n}\n.base {\n  --_appearance-color-text: var(--_connotation-color-contrast);\n  --_appearance-color-fill: var(--_connotation-color-soft);\n  --_appearance-color-outline: transparent;\n}\n.base.appearance-duotone {\n  --_appearance-color-text: var(--_connotation-color-fierce);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: var(--_connotation-color-pale);\n}\n.base:where(:hover, .hover):where(:not(:disabled, .disabled, .readonly)) {\n  --_appearance-color-text: var(--_connotation-color-contrast);\n  --_appearance-color-fill: var(--_connotation-color-faint);\n  --_appearance-color-outline: transparent;\n}\n.base:where(:hover, .hover):where(:not(:disabled, .disabled, .readonly)).appearance-duotone {\n  --_appearance-color-text: var(--_connotation-color-fierce);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: var(--_connotation-color-firm);\n}\n.base:where(:active, .active):where(:not(:disabled, .disabled)) {\n  --_appearance-color-text: var(--_connotation-color-contrast);\n  --_appearance-color-fill: var(--_connotation-color-dim);\n  --_appearance-color-outline: transparent;\n}\n.base:where(:active, .active):where(:not(:disabled, .disabled)).appearance-duotone {\n  --_appearance-color-text: var(--_connotation-color-fierce);\n  --_appearance-color-fill: var(--_connotation-color-faint);\n  --_appearance-color-outline: var(--_connotation-color-pale);\n}\n.base:where(:disabled, .disabled) {\n  --_appearance-color-text: var(--vvd-color-neutral-300);\n  --_appearance-color-fill: var(--vvd-color-neutral-100);\n  --_appearance-color-outline: transparent;\n}\n.base:where(:disabled, .disabled).appearance-duotone {\n  --_appearance-color-text: var(--vvd-color-neutral-300);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: var(--vvd-color-neutral-100);\n}\n.base:where(.selected, [aria-current]):where(:not(:disabled, .disabled, :hover, .hover)) {\n  --_appearance-color-text: var(--_connotation-color-contrast);\n  --_appearance-color-fill: var(--_connotation-color-pale);\n  --_appearance-color-outline: transparent;\n}\n.base:where(.selected, [aria-current]):where(:not(:disabled, .disabled, :hover, .hover)).appearance-duotone {\n  --_appearance-color-text: var(--_connotation-color-fierce);\n  --_appearance-color-fill: var(--_connotation-color-faint);\n  --_appearance-color-outline: var(--_connotation-color-pale);\n}\n.base:not(.shape-pill) {\n  border-radius: 4px;\n}\n.base.shape-pill {\n  border-radius: 14px;\n}\n@supports selector(:focus-visible) {\n  .base:focus-visible {\n    outline: none;\n  }\n}\n@supports (user-select: none) {\n  .base {\n    user-select: none;\n  }\n}\n.base:not(.disabled) {\n  cursor: pointer;\n}\n.base.disabled {\n  cursor: not-allowed;\n  pointer-events: none;\n}\n.base.removable {\n  cursor: auto;\n}\n\n.label {\n  overflow: hidden;\n  max-inline-size: 100%;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\nslot[name=icon] {\n  font-size: calc(var(--tag-block-size) / 1.5);\n  line-height: 1;\n}\n\n.dismiss-button {\n  display: flex;\n  align-items: center;\n  background-color: var(--_appearance-color-fill);\n  border-radius: inherit;\n  cursor: pointer;\n}\n\n.focus-indicator {\n  --focus-stroke-gap-color: transparent;\n}\n.base:not(:focus-visible) .focus-indicator {\n  display: none;\n}";

const getClasses = ({
  connotation,
  appearance,
  shape,
  disabled,
  selectable,
  removable,
  selected
}) => classNames(
  "base",
  ["disabled", disabled],
  ["selectable", selectable],
  ["active", selectable && selected],
  ["removable", removable && !selectable],
  [`connotation-${connotation}`, Boolean(connotation)],
  [`appearance-${appearance}`, Boolean(appearance)],
  [`shape-${shape}`, Boolean(shape)]
);
function renderDismissButton(iconTag) {
  return html`
	<span
		aria-hidden="true"
		class="dismiss-button"
		@click="${(x) => x.remove()}">
		<${iconTag} name="close-line"></${iconTag}>
	</span>`;
}
const tagTemplate = (context) => {
  const affixIconTemplate = affixIconTemplateFactory(context);
  const iconTag = context.tagFor(Icon);
  const focusTemplate = focusTemplateFactory(context);
  return html`
	<span class="${getClasses}"
	role="option"
	aria-disabled="${(x) => x.disabled}"
	aria-selected="${(x) => x.selectable}"
	tabindex="${(x) => x.disabled ? null : 0}"
	@keydown="${(x, c) => x.handleKeydown(c.event)}"
	@click="${(x) => x.handleClick()}">
		${(x) => affixIconTemplate(x.icon, IconWrapper.Slot)}
		${when((x) => x.label, (x) => html`<span class="label">${x.label}</span>`)}
		${when((x) => x.removable && !x.selectable, renderDismissButton(iconTag))}
		${when(
    (x) => x.selectable && x.selected,
    html`<${iconTag} class="selectable-icon" name="check-circle-solid"></${iconTag}>`
  )}
		${() => focusTemplate}
	</span>`;
};

const tagDefinition = Tag.compose({
  baseName: "tag",
  template: tagTemplate,
  styles,
  shadowOptions: {
    delegatesFocus: true
  }
});
const tagRegistries = [tagDefinition(), ...iconRegistries, ...focusRegistries];
const registerTag = registerFactory(tagRegistries);

export { registerTag as r, tagDefinition as t };
