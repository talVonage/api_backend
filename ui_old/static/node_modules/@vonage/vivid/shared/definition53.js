import { a as attr, F as FoundationElement, h as html, r as registerFactory } from './index.js';
import { P as Popup, p as popupRegistries } from './definition58.js';
import { c as classNames } from './class-names.js';

const styles = "/**\n * Do not edit directly\n * Generated on Tue, 17 Oct 2023 15:27:52 GMT\n */\n.control {\n  pointer-events: none;\n}\n\n.tooltip {\n  width: var(--tooltip-inline-size, auto);\n}\n.tooltip-text {\n  padding: 8px 12px;\n  color: var(--vvd-color-canvas-text);\n  font: var(--vvd-typography-base-bold);\n}";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
class Tooltip extends FoundationElement {
  constructor() {
    super(...arguments);
    this.#anchorEl = null;
    this.open = false;
    this.#observeMissingAnchor = (anchorId) => {
      this.#observer = new MutationObserver(() => {
        const anchor = document.getElementById(anchorId);
        if (anchor) {
          this.#anchorEl = anchor;
          this.#anchorUpdated();
          this.#observer.disconnect();
          this.#observer = void 0;
        }
      });
      this.#observer.observe(document.body, { childList: true, subtree: true });
    };
    this.#show = () => {
      this.open = true;
    };
    this.#hide = () => {
      this.open = false;
    };
    this.#closeOnEscape = (e) => {
      if (e.key === "Escape")
        this.#hide();
    };
  }
  #anchorEl;
  #observer;
  anchorChanged(_, newValue) {
    if (this.#anchorEl)
      this.#removeEventListener();
    this.#observer?.disconnect();
    this.#anchorEl = newValue instanceof HTMLElement ? newValue : document.getElementById(newValue);
    if (this.#anchorEl) {
      this.#anchorUpdated();
    } else {
      this.#observeMissingAnchor(newValue);
    }
  }
  #observeMissingAnchor;
  disconnectedCallback() {
    super.disconnectedCallback();
    this.#removeEventListener();
    this.#observer?.disconnect();
    document.removeEventListener("keydown", this.#closeOnEscape);
  }
  #anchorUpdated() {
    this.#removeEventListener();
    this.#addEventListener();
  }
  #addEventListener() {
    if (this.#anchorEl) {
      this.#anchorEl.addEventListener("mouseover", this.#show);
      this.#anchorEl.addEventListener("mouseout", this.#hide);
      this.#anchorEl.addEventListener("focusin", this.#show);
      this.#anchorEl.addEventListener("focusout", this.#hide);
    }
  }
  #removeEventListener() {
    this.#anchorEl?.removeEventListener("mouseover", this.#show);
    this.#anchorEl?.removeEventListener("mouseout", this.#hide);
    this.#anchorEl?.removeEventListener("focusin", this.#show);
    this.#anchorEl?.removeEventListener("focusout", this.#hide);
  }
  #show;
  #hide;
  #closeOnEscape;
  openChanged(_, newValue) {
    if (_ === void 0)
      return;
    if (newValue) {
      document.addEventListener("keydown", this.#closeOnEscape);
    } else {
      document.removeEventListener("keydown", this.#closeOnEscape);
    }
  }
}
__decorateClass([
  attr
], Tooltip.prototype, "text", 2);
__decorateClass([
  attr({ mode: "fromView" })
], Tooltip.prototype, "placement", 2);
__decorateClass([
  attr({ mode: "boolean" })
], Tooltip.prototype, "open", 2);
__decorateClass([
  attr({ mode: "fromView" })
], Tooltip.prototype, "anchor", 2);

const getClasses = ({
  open
}) => classNames(
  "control",
  ["open", Boolean(open)]
);
const TooltipTemplate = (context) => {
  const popupTag = context.tagFor(Popup);
  return html`
<${popupTag} class="${getClasses}" arrow alternate
	:placement=${(x) => x.placement}
	:anchor="${(x) => x.anchor}"
	:open=${(x) => x.open}
  exportparts="vvd-theme-alternate">
  <div class="tooltip" role="tooltip">
    <header part="vvd-theme-alternate" class="tooltip-header">
      <div class="tooltip-text">${(x) => x.text}</div>
    </header>
  </div>
</${popupTag}>`;
};

const tooltipDefinition = Tooltip.compose({
  baseName: "tooltip",
  template: TooltipTemplate,
  styles
});
const tooltipRegistries = [tooltipDefinition(), ...popupRegistries];
const registerTooltip = registerFactory(tooltipRegistries);

export { tooltipRegistries as a, registerTooltip as r, tooltipDefinition as t };
