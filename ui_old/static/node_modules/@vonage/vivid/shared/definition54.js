import { a as attr, h as html, r as registerFactory } from './index.js';
import { a as iconRegistries } from './definition25.js';
import { f as focusRegistries } from './definition56.js';
import { A as AffixIcon, a as affixIconTemplateFactory, I as IconWrapper } from './affix.js';
import { T as TreeItem$1 } from './tree-item.js';
import { a as applyMixins } from './apply-mixins.js';
import { I as Icon } from './icon.js';
import { f as focusTemplateFactory } from './focus2.js';
import { e as elements, s as slotted } from './slotted.js';
import { c as children } from './children.js';
import { w as when } from './when.js';
import { c as classNames } from './class-names.js';
import { r as ref } from './ref.js';

const styles = "/**\n * Do not edit directly\n * Generated on Tue, 17 Oct 2023 15:27:52 GMT\n */\n@supports selector(:focus-visible) {\n  :host(:focus-visible) {\n    outline: none;\n  }\n}\n:host([disabled]) {\n  cursor: not-allowed;\n}\n\n.control {\n  position: relative;\n  display: inline-flex;\n  box-sizing: border-box;\n  align-items: center;\n  background-color: var(--_appearance-color-fill);\n  border-radius: 6px;\n  box-shadow: inset 0 0 0 1px var(--_appearance-color-outline);\n  color: var(--_appearance-color-text);\n  font: var(--vvd-typography-base);\n  gap: 12px;\n  hyphens: auto;\n  inline-size: 100%;\n  min-block-size: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2)));\n  padding-inline: 16px;\n  text-decoration: none;\n  vertical-align: middle;\n  word-break: break-word;\n}\n.control {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: transparent;\n}\n.control:where(:disabled, .disabled) {\n  --_appearance-color-text: var(--vvd-color-neutral-300);\n  --_appearance-color-fill: transparent;\n  --_appearance-color-outline: transparent;\n}\n.control:where(:hover, .hover):where(:not(:disabled, .disabled, .readonly)) {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: var(--_connotation-color-faint);\n  --_appearance-color-outline: transparent;\n}\n.control:where(:active, .active):where(:not(:disabled, .disabled)) {\n  --_appearance-color-text: var(--_connotation-color-primary);\n  --_appearance-color-fill: var(--_connotation-color-soft);\n  --_appearance-color-outline: transparent;\n}\n.control:where(.selected, [aria-current]):where(:not(:disabled, .disabled, :hover, .hover)) {\n  --_appearance-color-text: var(--_connotation-color-primary-text);\n  --_appearance-color-fill: var(--_connotation-color-primary);\n  --_appearance-color-outline: transparent;\n}\n.control:where(.selected, [aria-current]):where(:hover, .hover) {\n  --_appearance-color-text: var(--_connotation-color-primary-text);\n  --_appearance-color-fill: var(--_connotation-color-primary-increment);\n  --_appearance-color-outline: transparent;\n}\n.control {\n  /* @cssprop [--vvd-tree-item-accent-primary=var(--vvd-color-canvas-text)] */\n  --_connotation-color-primary: var(--vvd-tree-item-accent-primary, var(--vvd-color-canvas-text));\n  /* @cssprop [--vvd-tree-item-accent-primary-text=var(--vvd-color-canvas)] */\n  --_connotation-color-primary-text: var(--vvd-tree-item-accent-primary-text, var(--vvd-color-canvas));\n  /* @cssprop [--vvd-tree-item-accent-primary-increment=var(--vvd-color-neutral-800)] */\n  --_connotation-color-primary-increment: var(--vvd-tree-item-accent-primary-increment, var(--vvd-color-neutral-800));\n  /* @cssprop [--vvd-tree-item-accent-faint=var(--vvd-color-neutral-50)] */\n  --_connotation-color-faint: var(--vvd-tree-item-accent-faint, var(--vvd-color-neutral-50));\n  /* @cssprop [--vvd-tree-item-accent-soft=var(--vvd-color-neutral-100)] */\n  --_connotation-color-soft: var(--vvd-tree-item-accent-soft, var(--vvd-color-neutral-100));\n}\n@supports selector(:focus-visible) {\n  .control:focus-visible {\n    outline: none;\n  }\n}\n@supports (user-select: none) {\n  .control {\n    user-select: none;\n  }\n}\n.control:not(.disabled) {\n  cursor: pointer;\n}\n.control.disabled {\n  pointer-events: none;\n}\n.control .text {\n  font: var(--vvd-typography-base);\n}\n\n.expandCollapseButton {\n  display: flex;\n  align-items: center;\n  border-radius: 6px;\n  font-size: 20px;\n}\n.expandCollapseButton .expandCollapseIcon {\n  margin: 4px;\n}\n.expandCollapseButton:hover {\n  background-color: var(--vvd-color-neutral-100);\n}\n.selected .expandCollapseButton:hover {\n  background-color: var(--vvd-color-neutral-700);\n}\n\n.items {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  margin-block: 4px;\n  padding-inline-start: 48px;\n}\n\n:host(:not(:focus-visible)) .focus-indicator {\n  display: none;\n}\n\nslot[name=icon] {\n  font-size: 20px;\n  line-height: 1;\n}\n.control:not(.disabled, .selected) slot[name=icon] {\n  color: var(--vvd-color-neutral-600);\n}";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
class TreeItem extends TreeItem$1 {
}
__decorateClass([
  attr
], TreeItem.prototype, "text", 2);
applyMixins(TreeItem, AffixIcon);

const getClasses = ({
  disabled,
  selected
}) => classNames(
  "control",
  ["disabled", disabled],
  ["selected", Boolean(selected)]
);
const expandCollapseButton = (context) => {
  const iconTag = context.tagFor(Icon);
  return html`
	<div aria-hidden="true"
		class="expandCollapseButton"
		@click="${(x, c) => x.handleExpandCollapseButtonClick(c.event)}"
			${ref("expandCollapseButton")}
	>
		<${iconTag} class="expandCollapseIcon" name="${(x) => x.expanded ? "chevron-down-line" : "chevron-right-line"}"></${iconTag}>
	</div>`;
};
const TreeItemTemplate = (context) => {
  const affixIconTemplate = affixIconTemplateFactory(context);
  const focusTemplate = focusTemplateFactory(context);
  return html`
	<template
			role="treeitem"
			slot="${(x) => x.isNestedItem() ? "item" : void 0}"
			tabindex="-1"
			aria-expanded="${(x) => x.childItems && x.childItems.length > 0 ? x.expanded : void 0}"
			aria-selected="${(x) => x.selected}"
			aria-disabled="${(x) => x.disabled}"
			@focusin="${(x, c) => x.handleFocus(c.event)}"
			@focusout="${(x, c) => x.handleBlur(c.event)}"
			${children({ property: "childItems", filter: elements(context.tagFor(TreeItem)) })}
			>
			<div class="${getClasses}">
				${() => focusTemplate}
				${when((x) => x.childItems && x.childItems.length > 0, expandCollapseButton(context))}
				${(x) => affixIconTemplate(x.icon, IconWrapper.Slot)}
				${(x) => x.text}
			</div>
			${when(
    (x) => x.childItems && x.childItems.length > 0 && x.expanded,
    html`
				<div role="group" class="items">
					<slot name="item" ${slotted("items")}></slot>
				</div>`
  )}
		</template>`;
};

const treeItemDefinition = TreeItem.compose(
  {
    baseName: "tree-item",
    template: TreeItemTemplate,
    styles
  }
);
const treeItemRegistries = [treeItemDefinition(), ...iconRegistries, ...focusRegistries];
const registerTreeItem = registerFactory(treeItemRegistries);

export { treeItemRegistries as a, registerTreeItem as r, treeItemDefinition as t };
