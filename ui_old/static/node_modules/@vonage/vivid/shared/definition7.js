import { a as attr, F as FoundationElement, h as html, r as registerFactory } from './index.js';
import { C as Connotation, B as Button, a as buttonRegistries } from './definition10.js';
import { a as iconRegistries } from './definition25.js';
import { A as AffixIcon, a as affixIconTemplateFactory, I as IconWrapper } from './affix.js';
import { a as applyMixins } from './apply-mixins.js';
import { w as when } from './when.js';
import { c as classNames } from './class-names.js';

const styles = "/**\n * Do not edit directly\n * Generated on Tue, 17 Oct 2023 15:27:52 GMT\n */\n.control {\n  overflow: hidden;\n  max-height: 160px;\n  background-color: var(--_appearance-color-fill);\n  color: var(--_appearance-color-text);\n  transition: max-height var(--transition-delay, 200ms);\n}\n.control.connotation-success {\n  /* @cssprop [--vvd-banner-success-primary=var(--vvd-color-success-500)] */\n  --_connotation-color-primary: var(--vvd-banner-success-primary, var(--vvd-color-success-500));\n  /* @cssprop [--vvd-banner-success-primary-text=var(--vvd-color-canvas)] */\n  --_connotation-color-primary-text: var(--vvd-banner-success-primary-text, var(--vvd-color-canvas));\n}\n.control.connotation-alert {\n  /* @cssprop [--vvd-banner-alert-primary=var(--vvd-color-alert-500)] */\n  --_connotation-color-primary: var(--vvd-banner-alert-primary, var(--vvd-color-alert-500));\n  /* @cssprop [--vvd-banner-alert-primary-text=var(--vvd-color-canvas)] */\n  --_connotation-color-primary-text: var(--vvd-banner-alert-primary-text, var(--vvd-color-canvas));\n}\n.control.connotation-announcement {\n  /* @cssprop [--vvd-banner-announcement-primary=var(--vvd-color-announcement-500)] */\n  --_connotation-color-primary: var(--vvd-banner-announcement-primary, var(--vvd-color-announcement-500));\n  /* @cssprop [--vvd-banner-announcement-primary-text=var(--vvd-color-canvas)] */\n  --_connotation-color-primary-text: var(--vvd-banner-announcement-primary-text, var(--vvd-color-canvas));\n}\n.control.connotation-warning {\n  /* @cssprop [--vvd-banner-warning-primary=var(--vvd-color-warning-300)] */\n  --_connotation-color-primary: var(--vvd-banner-warning-primary, var(--vvd-color-warning-300));\n  /* @cssprop [--vvd-banner-warning-primary-text=var(--vvd-color-canvas-text)] */\n  --_connotation-color-primary-text: var(--vvd-banner-warning-primary-text, var(--vvd-color-canvas-text));\n}\n.control:not(.connotation-success, .connotation-alert, .connotation-announcement, .connotation-warning) {\n  /* @cssprop [--vvd-banner-information-primary=var(--vvd-color-information-500)] */\n  --_connotation-color-primary: var(--vvd-banner-information-primary, var(--vvd-color-information-500));\n  /* @cssprop [--vvd-banner-information-primary-text=var(--vvd-color-canvas)] */\n  --_connotation-color-primary-text: var(--vvd-banner-information-primary-text, var(--vvd-color-canvas));\n}\n.control {\n  --_appearance-color-text: var(--_connotation-color-primary-text);\n  --_appearance-color-fill: var(--_connotation-color-primary);\n  --_appearance-color-outline: transparent;\n}\n.control.removing {\n  max-height: 0;\n}\n\n.header {\n  display: flex;\n  min-height: calc(1px * (40 + 4 * clamp(-1, var(--vvd-size-density, 0), 2) + 20));\n  align-items: center;\n  font: var(--vvd-typography-base-bold);\n  inline-size: 100%;\n}\n.header .content {\n  display: flex;\n  flex-grow: 1;\n  align-items: center;\n  justify-content: center;\n  column-gap: 16px;\n  inline-size: 100%;\n  padding-inline: 16px;\n}\n.header .content slot[name=icon] {\n  flex-shrink: 0;\n  font-size: 20px;\n  line-height: 1;\n}\n.header .content .action-items {\n  flex-shrink: 0;\n}\n.header .dismiss-button {\n  flex-shrink: 0;\n  margin-inline-end: 8px;\n}";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
const connotationIconMap = /* @__PURE__ */ new Map([
  [Connotation.Information, "info-solid"],
  [Connotation.Announcement, "megaphone-solid"],
  [Connotation.Success, "check-circle-solid"],
  [Connotation.Warning, "warning-solid"],
  [Connotation.Alert, "error-solid"]
]);
const defaultConnotation = (connotation = Connotation.Information) => connotationIconMap.get(connotation);
class Banner extends FoundationElement {
  constructor() {
    super(...arguments);
    this.role = null;
    this.removable = false;
    this.#handleRemoveEnd = () => {
      this.$emit("removed");
      this.parentElement && this.parentElement.removeChild(this);
    };
    this.#closeOnKeyDown = (e) => {
      if (e.key !== "Escape" || !this.removable) {
        return;
      }
      this.remove();
    };
  }
  get conditionedIcon() {
    return this.icon ?? defaultConnotation(this.connotation);
  }
  connectedCallback() {
    super.connectedCallback();
    this.addEventListener("keydown", this.#closeOnKeyDown);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener("keydown", this.#closeOnKeyDown);
  }
  remove() {
    this.$emit("removing");
    const banner = this.shadowRoot && this.shadowRoot.querySelector(".control");
    if (banner) {
      banner.classList.add("removing");
      banner.addEventListener("transitionend", this.#handleRemoveEnd);
    }
  }
  #handleRemoveEnd;
  #closeOnKeyDown;
}
__decorateClass([
  attr
], Banner.prototype, "role", 2);
__decorateClass([
  attr({ attribute: "action-href" })
], Banner.prototype, "actionHref", 2);
__decorateClass([
  attr({ attribute: "action-text" })
], Banner.prototype, "actionText", 2);
__decorateClass([
  attr({ mode: "boolean" })
], Banner.prototype, "removable", 2);
__decorateClass([
  attr({ attribute: "aria-live" })
], Banner.prototype, "ariaLive", 2);
__decorateClass([
  attr()
], Banner.prototype, "text", 2);
__decorateClass([
  attr()
], Banner.prototype, "connotation", 2);
applyMixins(Banner, AffixIcon);

const getClasses = (_) => classNames(
  "control",
  [`connotation-${_.connotation}`, !!_.connotation]
);
function renderDismissButton(buttonTag) {
  return html`
	  <${buttonTag}
				part="vvd-theme-alternate"
			  size="condensed"
			  class="dismiss-button"
			  icon="close-line"
			  @click="${(x) => x.remove()}">
	  </${buttonTag}>`;
}
const BannerTemplate = (context) => {
  const affixIconTemplate = affixIconTemplateFactory(context);
  const buttonTag = context.tagFor(Button);
  return html`
	  <div class="${getClasses}" tabindex="0">
		  <header class="header">
					<div class="content">
            ${(x) => affixIconTemplate(x.conditionedIcon, IconWrapper.Slot)}
						<div class="banner-message"
						 role="${(x) => x.role ? x.role : "status"}"
						 aria-live="${(x) => x.ariaLive ? x.ariaLive : "polite"}">
									${(x) => x.text}
            </div>
						<slot class="action-items" name="action-items"></slot>
					</div>

			  ${when((x) => x.removable, renderDismissButton(buttonTag))}
		  </header>
	  </div>
	`;
};

const bannerDefinition = Banner.compose({
  baseName: "banner",
  template: BannerTemplate,
  styles
});
const bannerRegistries = [bannerDefinition(), ...iconRegistries, ...buttonRegistries];
const registerBanner = registerFactory(bannerRegistries);

export { bannerRegistries as a, bannerDefinition as b, registerBanner as r };
