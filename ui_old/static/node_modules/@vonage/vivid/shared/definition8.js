import { a as attr, h as html, r as registerFactory } from './index.js';
import { a as iconRegistries } from './definition25.js';
import { f as focusRegistries } from './definition56.js';
import { B as BreadcrumbItem$1 } from './breadcrumb-item.js';
import { t as textAnchorTemplate } from './text-anchor.template.js';
import { I as Icon } from './icon.js';
import { w as when } from './when.js';
import { c as classNames } from './class-names.js';

const styles = "/**\n * Do not edit directly\n * Generated on Tue, 17 Oct 2023 15:27:52 GMT\n */\n.base {\n  display: flex;\n  align-items: center;\n  color: var(--vvd-color-canvas-text);\n  font: var(--vvd-typography-base);\n}\n.base .separator {\n  margin: 0 16px;\n  color: var(--vvd-color-neutral-600);\n  font-size: 12px;\n}\n\n.control {\n  position: relative;\n  font: inherit;\n}\n@supports selector(:focus-visible) {\n  .control:focus-visible {\n    outline: none;\n  }\n}\n.control:any-link {\n  color: var(--vvd-color-cta-600);\n  text-decoration: none;\n}\n.control:any-link:hover {\n  text-decoration: underline;\n}\n\n.focus-indicator {\n  --focus-inset: -4px -8px;\n  --focus-stroke-gap-color: transparent;\n  border-radius: 6px;\n}\n.control:not(:focus-visible) > .focus-indicator {\n  display: none;\n}";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
class BreadcrumbItem extends BreadcrumbItem$1 {
  constructor() {
    super();
  }
}
__decorateClass([
  attr
], BreadcrumbItem.prototype, "text", 2);

const getClasses = (_) => classNames("base");
const BreadcrumbItemTemplate = (context, definition) => {
  const iconTag = context.tagFor(Icon);
  return html`
	<div role="listitem" class="${getClasses}">
		${when(
    (x) => x.text && !x.href,
    html`${(x) => x.text}`
  )}

		${when(
    (x) => x.text && x.href && x.href.length > 0,
    html`${textAnchorTemplate(context)}`
  )}

		${when(
    (x) => x.separator,
    html`<${iconTag} class="separator" name="chevron-right-solid"></${iconTag}>`
  )}
	</div>`;
};

const breadcrumbItemDefinition = BreadcrumbItem.compose({
  baseName: "breadcrumb-item",
  template: BreadcrumbItemTemplate,
  styles,
  shadowOptions: {
    delegatesFocus: true
  }
});
const breadcrumbItemRegistries = [breadcrumbItemDefinition(), ...iconRegistries, ...focusRegistries];
const registerBreadcrumbItem = registerFactory(breadcrumbItemRegistries);

export { breadcrumbItemRegistries as a, breadcrumbItemDefinition as b, registerBreadcrumbItem as r };
