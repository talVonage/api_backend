import type { ElementDefinitionContext } from '@microsoft/fast-foundation';
export interface FormElement {
    errorValidationMessage: string;
    label: string;
    userValid: boolean;
    dirtyValue: boolean;
}
export interface FormElementHelperText {
    helperText?: string;
}
export interface FormElementSuccessText {
    successText?: string;
}
export interface FormElementCharCount {
    charCount: boolean;
}
export interface ErrorText {
    errorText: string;
}
export declare class FormElementHelperText {
    helperText?: string;
}
export declare class FormElementSuccessText {
    successText?: string;
}
export declare class FormElementCharCount {
    charCount: boolean;
}
export declare function formElements<T extends {
    new (...args: any[]): Record<string, any>;
}>(constructor: T): {
    new (...args: any[]): {
        [x: string]: any;
        label?: string | undefined;
        errorValidationMessage: string;
        "__#2@#forceErrorDisplay": boolean;
        "__#2@#hasBeenTouched": boolean;
        connectedCallback(): void;
        "__#2@#handleInvalidEvent": () => void;
        disconnectedCallback(): void;
        formResetCallback(): void;
        validate: () => void;
    };
} & T;
type FeedbackType = 'error' | 'helper' | 'success';
export declare function getFeedbackTemplate(messageType: FeedbackType, context: ElementDefinitionContext): import("@microsoft/fast-element").ViewTemplate<FormElement, any>;
export declare function errorText<T extends {
    new (...args: any[]): Record<string, any>;
}>(constructor: T): {
    new (...args: any[]): {
        [x: string]: any;
        errorText?: string | undefined;
        "__#3@#blockValidateCalls": boolean;
        errorTextChanged(_: string, newErrorText: string | undefined): void;
        "__#3@#forceCustomError"(errorMessage: string): void;
        "__#3@#clearCustomErrorAndRevalidate"(): void;
    };
} & T;
export {};
